{"ast":null,"code":"import _awaitAsyncGenerator from \"C:/Users/sakas/OneDrive/Desktop/gogo/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _wrapAsyncGenerator from \"C:/Users/sakas/OneDrive/Desktop/gogo/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport _asyncIterator from \"C:/Users/sakas/OneDrive/Desktop/gogo/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nimport { isReadableStream } from 'is-stream';\nimport { asyncIterator } from '@sec-ant/readable-stream/ponyfill';\nexport const getAsyncIterable = stream => {\n  if (isReadableStream(stream, {\n    checkOpen: false\n  }) && nodeImports.on !== undefined) {\n    return getStreamIterable(stream);\n  }\n  if (typeof (stream === null || stream === void 0 ? void 0 : stream[Symbol.asyncIterator]) === 'function') {\n    return stream;\n  }\n\n  // `ReadableStream[Symbol.asyncIterator]` support is missing in multiple browsers, so we ponyfill it\n  if (toString.call(stream) === '[object ReadableStream]') {\n    return asyncIterator.call(stream);\n  }\n  throw new TypeError('The first argument must be a Readable, a ReadableStream, or an async iterable.');\n};\nconst {\n  toString\n} = Object.prototype;\n\n// The default iterable for Node.js streams does not allow for multiple readers at once, so we re-implement it\nconst getStreamIterable = /*#__PURE__*/function () {\n  var _ref = _wrapAsyncGenerator(function* (stream) {\n    const controller = new AbortController();\n    const state = {};\n    handleStreamEnd(stream, controller, state);\n    try {\n      var _iteratorAbruptCompletion = false;\n      var _didIteratorError = false;\n      var _iteratorError;\n      try {\n        for (var _iterator = _asyncIterator(nodeImports.on(stream, 'data', {\n            signal: controller.signal\n          })), _step; _iteratorAbruptCompletion = !(_step = yield _awaitAsyncGenerator(_iterator.next())).done; _iteratorAbruptCompletion = false) {\n          const [chunk] = _step.value;\n          {\n            yield chunk;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (_iteratorAbruptCompletion && _iterator.return != null) {\n            yield _awaitAsyncGenerator(_iterator.return());\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    } catch (error) {\n      // Stream failure, for example due to `stream.destroy(error)`\n      if (state.error !== undefined) {\n        throw state.error;\n        // `error` event directly emitted on stream\n      } else if (!controller.signal.aborted) {\n        throw error;\n        // Otherwise, stream completed successfully\n      }\n      // The `finally` block also runs when the caller throws, for example due to the `maxBuffer` option\n    } finally {\n      stream.destroy();\n    }\n  });\n  return function getStreamIterable(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nconst handleStreamEnd = async (stream, controller, state) => {\n  try {\n    await nodeImports.finished(stream, {\n      cleanup: true,\n      readable: true,\n      writable: false,\n      error: false\n    });\n  } catch (error) {\n    state.error = error;\n  } finally {\n    controller.abort();\n  }\n};\n\n// Loaded by the Node entrypoint, but not by the browser one.\n// This prevents using dynamic imports.\nexport const nodeImports = {};","map":{"version":3,"names":["isReadableStream","asyncIterator","getAsyncIterable","stream","checkOpen","nodeImports","on","undefined","getStreamIterable","Symbol","toString","call","TypeError","Object","prototype","_ref","_wrapAsyncGenerator","controller","AbortController","state","handleStreamEnd","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_asyncIterator","signal","_step","_awaitAsyncGenerator","next","done","chunk","value","err","return","error","aborted","destroy","_x","apply","arguments","finished","cleanup","readable","writable","abort"],"sources":["C:/Users/sakas/OneDrive/Desktop/gogo/node_modules/cacheable-request/node_modules/get-stream/source/stream.js"],"sourcesContent":["import {isReadableStream} from 'is-stream';\nimport {asyncIterator} from '@sec-ant/readable-stream/ponyfill';\n\nexport const getAsyncIterable = stream => {\n\tif (isReadableStream(stream, {checkOpen: false}) && nodeImports.on !== undefined) {\n\t\treturn getStreamIterable(stream);\n\t}\n\n\tif (typeof stream?.[Symbol.asyncIterator] === 'function') {\n\t\treturn stream;\n\t}\n\n\t// `ReadableStream[Symbol.asyncIterator]` support is missing in multiple browsers, so we ponyfill it\n\tif (toString.call(stream) === '[object ReadableStream]') {\n\t\treturn asyncIterator.call(stream);\n\t}\n\n\tthrow new TypeError('The first argument must be a Readable, a ReadableStream, or an async iterable.');\n};\n\nconst {toString} = Object.prototype;\n\n// The default iterable for Node.js streams does not allow for multiple readers at once, so we re-implement it\nconst getStreamIterable = async function * (stream) {\n\tconst controller = new AbortController();\n\tconst state = {};\n\thandleStreamEnd(stream, controller, state);\n\n\ttry {\n\t\tfor await (const [chunk] of nodeImports.on(stream, 'data', {signal: controller.signal})) {\n\t\t\tyield chunk;\n\t\t}\n\t} catch (error) {\n\t\t// Stream failure, for example due to `stream.destroy(error)`\n\t\tif (state.error !== undefined) {\n\t\t\tthrow state.error;\n\t\t// `error` event directly emitted on stream\n\t\t} else if (!controller.signal.aborted) {\n\t\t\tthrow error;\n\t\t// Otherwise, stream completed successfully\n\t\t}\n\t\t// The `finally` block also runs when the caller throws, for example due to the `maxBuffer` option\n\t} finally {\n\t\tstream.destroy();\n\t}\n};\n\nconst handleStreamEnd = async (stream, controller, state) => {\n\ttry {\n\t\tawait nodeImports.finished(stream, {\n\t\t\tcleanup: true,\n\t\t\treadable: true,\n\t\t\twritable: false,\n\t\t\terror: false,\n\t\t});\n\t} catch (error) {\n\t\tstate.error = error;\n\t} finally {\n\t\tcontroller.abort();\n\t}\n};\n\n// Loaded by the Node entrypoint, but not by the browser one.\n// This prevents using dynamic imports.\nexport const nodeImports = {};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}