{"ast":null,"code":"'use strict';\n\nconst tls = require('tls');\nmodule.exports = function () {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let connect = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : tls.connect;\n  return new Promise((resolve, reject) => {\n    let timeout = false;\n    let socket;\n    const callback = async () => {\n      await socketPromise;\n      socket.off('timeout', onTimeout);\n      socket.off('error', reject);\n      if (options.resolveSocket) {\n        resolve({\n          alpnProtocol: socket.alpnProtocol,\n          socket,\n          timeout\n        });\n        if (timeout) {\n          await Promise.resolve();\n          socket.emit('timeout');\n        }\n      } else {\n        socket.destroy();\n        resolve({\n          alpnProtocol: socket.alpnProtocol,\n          timeout\n        });\n      }\n    };\n    const onTimeout = async () => {\n      timeout = true;\n      callback();\n    };\n    const socketPromise = (async () => {\n      try {\n        socket = await connect(options, callback);\n        socket.on('error', reject);\n        socket.once('timeout', onTimeout);\n      } catch (error) {\n        reject(error);\n      }\n    })();\n  });\n};","map":{"version":3,"names":["tls","require","module","exports","options","arguments","length","undefined","connect","Promise","resolve","reject","timeout","socket","callback","socketPromise","off","onTimeout","resolveSocket","alpnProtocol","emit","destroy","on","once","error"],"sources":["C:/Users/sakas/OneDrive/Desktop/gogo/node_modules/resolve-alpn/index.js"],"sourcesContent":["'use strict';\nconst tls = require('tls');\n\nmodule.exports = (options = {}, connect = tls.connect) => new Promise((resolve, reject) => {\n\tlet timeout = false;\n\n\tlet socket;\n\n\tconst callback = async () => {\n\t\tawait socketPromise;\n\n\t\tsocket.off('timeout', onTimeout);\n\t\tsocket.off('error', reject);\n\n\t\tif (options.resolveSocket) {\n\t\t\tresolve({alpnProtocol: socket.alpnProtocol, socket, timeout});\n\n\t\t\tif (timeout) {\n\t\t\t\tawait Promise.resolve();\n\t\t\t\tsocket.emit('timeout');\n\t\t\t}\n\t\t} else {\n\t\t\tsocket.destroy();\n\t\t\tresolve({alpnProtocol: socket.alpnProtocol, timeout});\n\t\t}\n\t};\n\n\tconst onTimeout = async () => {\n\t\ttimeout = true;\n\t\tcallback();\n\t};\n\n\tconst socketPromise = (async () => {\n\t\ttry {\n\t\t\tsocket = await connect(options, callback);\n\n\t\t\tsocket.on('error', reject);\n\t\t\tsocket.once('timeout', onTimeout);\n\t\t} catch (error) {\n\t\t\treject(error);\n\t\t}\n\t})();\n});\n"],"mappings":"AAAA,YAAY;;AACZ,MAAMA,GAAG,GAAGC,OAAO,CAAC,KAAK,CAAC;AAE1BC,MAAM,CAACC,OAAO,GAAG;EAAA,IAACC,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;EAAA,IAAEG,OAAO,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGL,GAAG,CAACQ,OAAO;EAAA,OAAK,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IAC1F,IAAIC,OAAO,GAAG,KAAK;IAEnB,IAAIC,MAAM;IAEV,MAAMC,QAAQ,GAAG,MAAAA,CAAA,KAAY;MAC5B,MAAMC,aAAa;MAEnBF,MAAM,CAACG,GAAG,CAAC,SAAS,EAAEC,SAAS,CAAC;MAChCJ,MAAM,CAACG,GAAG,CAAC,OAAO,EAAEL,MAAM,CAAC;MAE3B,IAAIP,OAAO,CAACc,aAAa,EAAE;QAC1BR,OAAO,CAAC;UAACS,YAAY,EAAEN,MAAM,CAACM,YAAY;UAAEN,MAAM;UAAED;QAAO,CAAC,CAAC;QAE7D,IAAIA,OAAO,EAAE;UACZ,MAAMH,OAAO,CAACC,OAAO,CAAC,CAAC;UACvBG,MAAM,CAACO,IAAI,CAAC,SAAS,CAAC;QACvB;MACD,CAAC,MAAM;QACNP,MAAM,CAACQ,OAAO,CAAC,CAAC;QAChBX,OAAO,CAAC;UAACS,YAAY,EAAEN,MAAM,CAACM,YAAY;UAAEP;QAAO,CAAC,CAAC;MACtD;IACD,CAAC;IAED,MAAMK,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC7BL,OAAO,GAAG,IAAI;MACdE,QAAQ,CAAC,CAAC;IACX,CAAC;IAED,MAAMC,aAAa,GAAG,CAAC,YAAY;MAClC,IAAI;QACHF,MAAM,GAAG,MAAML,OAAO,CAACJ,OAAO,EAAEU,QAAQ,CAAC;QAEzCD,MAAM,CAACS,EAAE,CAAC,OAAO,EAAEX,MAAM,CAAC;QAC1BE,MAAM,CAACU,IAAI,CAAC,SAAS,EAAEN,SAAS,CAAC;MAClC,CAAC,CAAC,OAAOO,KAAK,EAAE;QACfb,MAAM,CAACa,KAAK,CAAC;MACd;IACD,CAAC,EAAE,CAAC;EACL,CAAC,CAAC;AAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}