{"ast":null,"code":"import _wrapRegExp from \"C:/Users/sakas/OneDrive/Desktop/gogo/node_modules/@babel/runtime/helpers/esm/wrapRegExp.js\";\nimport _defineProperty from \"C:/Users/sakas/OneDrive/Desktop/gogo/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"C:/Users/sakas/OneDrive/Desktop/gogo/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport process from 'node:process';\nimport { promisify, inspect } from 'node:util';\nimport { checkServerIdentity } from 'node:tls';\n// DO NOT use destructuring for `https.request` and `http.request` as it's not compatible with `nock`.\nimport https from 'node:https';\nimport http from 'node:http';\nimport is, { assert } from '@sindresorhus/is';\nimport lowercaseKeys from 'lowercase-keys';\nimport CacheableLookup from 'cacheable-lookup';\nimport http2wrapper from 'http2-wrapper';\nimport { isFormData } from 'form-data-encoder';\nimport parseLinkHeader from './parse-link-header.js';\nconst [major, minor] = process.versions.node.split('.').map(Number);\nfunction validateSearchParameters(searchParameters) {\n  // eslint-disable-next-line guard-for-in\n  for (const key in searchParameters) {\n    const value = searchParameters[key];\n    assert.any([is.string, is.number, is.boolean, is.null, is.undefined], value);\n  }\n}\nconst globalCache = new Map();\nlet globalDnsCache;\nconst getGlobalDnsCache = () => {\n  if (globalDnsCache) {\n    return globalDnsCache;\n  }\n  globalDnsCache = new CacheableLookup();\n  return globalDnsCache;\n};\nconst defaultInternals = {\n  request: undefined,\n  agent: {\n    http: undefined,\n    https: undefined,\n    http2: undefined\n  },\n  h2session: undefined,\n  decompress: true,\n  timeout: {\n    connect: undefined,\n    lookup: undefined,\n    read: undefined,\n    request: undefined,\n    response: undefined,\n    secureConnect: undefined,\n    send: undefined,\n    socket: undefined\n  },\n  prefixUrl: '',\n  body: undefined,\n  form: undefined,\n  json: undefined,\n  cookieJar: undefined,\n  ignoreInvalidCookies: false,\n  searchParams: undefined,\n  dnsLookup: undefined,\n  dnsCache: undefined,\n  context: {},\n  hooks: {\n    init: [],\n    beforeRequest: [],\n    beforeError: [],\n    beforeRedirect: [],\n    beforeRetry: [],\n    afterResponse: []\n  },\n  followRedirect: true,\n  maxRedirects: 10,\n  cache: undefined,\n  throwHttpErrors: true,\n  username: '',\n  password: '',\n  http2: false,\n  allowGetBody: false,\n  headers: {\n    'user-agent': 'got (https://github.com/sindresorhus/got)'\n  },\n  methodRewriting: false,\n  dnsLookupIpVersion: undefined,\n  parseJson: JSON.parse,\n  stringifyJson: JSON.stringify,\n  retry: {\n    limit: 2,\n    methods: ['GET', 'PUT', 'HEAD', 'DELETE', 'OPTIONS', 'TRACE'],\n    statusCodes: [408, 413, 429, 500, 502, 503, 504, 521, 522, 524],\n    errorCodes: ['ETIMEDOUT', 'ECONNRESET', 'EADDRINUSE', 'ECONNREFUSED', 'EPIPE', 'ENOTFOUND', 'ENETUNREACH', 'EAI_AGAIN'],\n    maxRetryAfter: undefined,\n    calculateDelay: _ref => {\n      let {\n        computedValue\n      } = _ref;\n      return computedValue;\n    },\n    backoffLimit: Number.POSITIVE_INFINITY,\n    noise: 100\n  },\n  localAddress: undefined,\n  method: 'GET',\n  createConnection: undefined,\n  cacheOptions: {\n    shared: undefined,\n    cacheHeuristic: undefined,\n    immutableMinTimeToLive: undefined,\n    ignoreCargoCult: undefined\n  },\n  https: {\n    alpnProtocols: undefined,\n    rejectUnauthorized: undefined,\n    checkServerIdentity: undefined,\n    certificateAuthority: undefined,\n    key: undefined,\n    certificate: undefined,\n    passphrase: undefined,\n    pfx: undefined,\n    ciphers: undefined,\n    honorCipherOrder: undefined,\n    minVersion: undefined,\n    maxVersion: undefined,\n    signatureAlgorithms: undefined,\n    tlsSessionLifetime: undefined,\n    dhparam: undefined,\n    ecdhCurve: undefined,\n    certificateRevocationLists: undefined\n  },\n  encoding: undefined,\n  resolveBodyOnly: false,\n  isStream: false,\n  responseType: 'text',\n  url: undefined,\n  pagination: {\n    transform(response) {\n      if (response.request.options.responseType === 'json') {\n        return response.body;\n      }\n      return JSON.parse(response.body);\n    },\n    paginate(_ref2) {\n      let {\n        response\n      } = _ref2;\n      const rawLinkHeader = response.headers.link;\n      if (typeof rawLinkHeader !== 'string' || rawLinkHeader.trim() === '') {\n        return false;\n      }\n      const parsed = parseLinkHeader(rawLinkHeader);\n      const next = parsed.find(entry => entry.parameters.rel === 'next' || entry.parameters.rel === '\"next\"');\n      if (next) {\n        return {\n          url: new URL(next.reference, response.url)\n        };\n      }\n      return false;\n    },\n    filter: () => true,\n    shouldContinue: () => true,\n    countLimit: Number.POSITIVE_INFINITY,\n    backoff: 0,\n    requestLimit: 10000,\n    stackAllItems: false\n  },\n  setHost: true,\n  maxHeaderSize: undefined,\n  signal: undefined,\n  enableUnixSockets: false\n};\nconst cloneInternals = internals => {\n  const {\n    hooks,\n    retry\n  } = internals;\n  const result = _objectSpread(_objectSpread({}, internals), {}, {\n    context: _objectSpread({}, internals.context),\n    cacheOptions: _objectSpread({}, internals.cacheOptions),\n    https: _objectSpread({}, internals.https),\n    agent: _objectSpread({}, internals.agent),\n    headers: _objectSpread({}, internals.headers),\n    retry: _objectSpread(_objectSpread({}, retry), {}, {\n      errorCodes: [...retry.errorCodes],\n      methods: [...retry.methods],\n      statusCodes: [...retry.statusCodes]\n    }),\n    timeout: _objectSpread({}, internals.timeout),\n    hooks: {\n      init: [...hooks.init],\n      beforeRequest: [...hooks.beforeRequest],\n      beforeError: [...hooks.beforeError],\n      beforeRedirect: [...hooks.beforeRedirect],\n      beforeRetry: [...hooks.beforeRetry],\n      afterResponse: [...hooks.afterResponse]\n    },\n    searchParams: internals.searchParams ? new URLSearchParams(internals.searchParams) : undefined,\n    pagination: _objectSpread({}, internals.pagination)\n  });\n  if (result.url !== undefined) {\n    result.prefixUrl = '';\n  }\n  return result;\n};\nconst cloneRaw = raw => {\n  const {\n    hooks,\n    retry\n  } = raw;\n  const result = _objectSpread({}, raw);\n  if (is.object(raw.context)) {\n    result.context = _objectSpread({}, raw.context);\n  }\n  if (is.object(raw.cacheOptions)) {\n    result.cacheOptions = _objectSpread({}, raw.cacheOptions);\n  }\n  if (is.object(raw.https)) {\n    result.https = _objectSpread({}, raw.https);\n  }\n  if (is.object(raw.cacheOptions)) {\n    result.cacheOptions = _objectSpread({}, result.cacheOptions);\n  }\n  if (is.object(raw.agent)) {\n    result.agent = _objectSpread({}, raw.agent);\n  }\n  if (is.object(raw.headers)) {\n    result.headers = _objectSpread({}, raw.headers);\n  }\n  if (is.object(retry)) {\n    result.retry = _objectSpread({}, retry);\n    if (is.array(retry.errorCodes)) {\n      result.retry.errorCodes = [...retry.errorCodes];\n    }\n    if (is.array(retry.methods)) {\n      result.retry.methods = [...retry.methods];\n    }\n    if (is.array(retry.statusCodes)) {\n      result.retry.statusCodes = [...retry.statusCodes];\n    }\n  }\n  if (is.object(raw.timeout)) {\n    result.timeout = _objectSpread({}, raw.timeout);\n  }\n  if (is.object(hooks)) {\n    result.hooks = _objectSpread({}, hooks);\n    if (is.array(hooks.init)) {\n      result.hooks.init = [...hooks.init];\n    }\n    if (is.array(hooks.beforeRequest)) {\n      result.hooks.beforeRequest = [...hooks.beforeRequest];\n    }\n    if (is.array(hooks.beforeError)) {\n      result.hooks.beforeError = [...hooks.beforeError];\n    }\n    if (is.array(hooks.beforeRedirect)) {\n      result.hooks.beforeRedirect = [...hooks.beforeRedirect];\n    }\n    if (is.array(hooks.beforeRetry)) {\n      result.hooks.beforeRetry = [...hooks.beforeRetry];\n    }\n    if (is.array(hooks.afterResponse)) {\n      result.hooks.afterResponse = [...hooks.afterResponse];\n    }\n  }\n  // TODO: raw.searchParams\n  if (is.object(raw.pagination)) {\n    result.pagination = _objectSpread({}, raw.pagination);\n  }\n  return result;\n};\nconst getHttp2TimeoutOption = internals => {\n  const delays = [internals.timeout.socket, internals.timeout.connect, internals.timeout.lookup, internals.timeout.request, internals.timeout.secureConnect].filter(delay => typeof delay === 'number');\n  if (delays.length > 0) {\n    return Math.min(...delays);\n  }\n  return undefined;\n};\nconst init = (options, withOptions, self) => {\n  var _options$hooks;\n  const initHooks = (_options$hooks = options.hooks) === null || _options$hooks === void 0 ? void 0 : _options$hooks.init;\n  if (initHooks) {\n    for (const hook of initHooks) {\n      hook(withOptions, self);\n    }\n  }\n};\nexport default class Options {\n  constructor(input, options, defaults) {\n    var _ref3, _defaults$_internals, _defaults$_init;\n    _defineProperty(this, \"_unixOptions\", void 0);\n    _defineProperty(this, \"_internals\", void 0);\n    _defineProperty(this, \"_merging\", void 0);\n    _defineProperty(this, \"_init\", void 0);\n    assert.any([is.string, is.urlInstance, is.object, is.undefined], input);\n    assert.any([is.object, is.undefined], options);\n    assert.any([is.object, is.undefined], defaults);\n    if (input instanceof Options || options instanceof Options) {\n      throw new TypeError('The defaults must be passed as the third argument');\n    }\n    this._internals = cloneInternals((_ref3 = (_defaults$_internals = defaults === null || defaults === void 0 ? void 0 : defaults._internals) !== null && _defaults$_internals !== void 0 ? _defaults$_internals : defaults) !== null && _ref3 !== void 0 ? _ref3 : defaultInternals);\n    this._init = [...((_defaults$_init = defaults === null || defaults === void 0 ? void 0 : defaults._init) !== null && _defaults$_init !== void 0 ? _defaults$_init : [])];\n    this._merging = false;\n    this._unixOptions = undefined;\n    // This rule allows `finally` to be considered more important.\n    // Meaning no matter the error thrown in the `try` block,\n    // if `finally` throws then the `finally` error will be thrown.\n    //\n    // Yes, we want this. If we set `url` first, then the `url.searchParams`\n    // would get merged. Instead we set the `searchParams` first, then\n    // `url.searchParams` is overwritten as expected.\n    //\n    /* eslint-disable no-unsafe-finally */\n    try {\n      if (is.plainObject(input)) {\n        try {\n          this.merge(input);\n          this.merge(options);\n        } finally {\n          this.url = input.url;\n        }\n      } else {\n        try {\n          this.merge(options);\n        } finally {\n          if ((options === null || options === void 0 ? void 0 : options.url) !== undefined) {\n            if (input === undefined) {\n              this.url = options.url;\n            } else {\n              throw new TypeError('The `url` option is mutually exclusive with the `input` argument');\n            }\n          } else if (input !== undefined) {\n            this.url = input;\n          }\n        }\n      }\n    } catch (error) {\n      error.options = this;\n      throw error;\n    }\n    /* eslint-enable no-unsafe-finally */\n  }\n  merge(options) {\n    if (!options) {\n      return;\n    }\n    if (options instanceof Options) {\n      for (const init of options._init) {\n        this.merge(init);\n      }\n      return;\n    }\n    options = cloneRaw(options);\n    init(this, options, this);\n    init(options, options, this);\n    this._merging = true;\n    // Always merge `isStream` first\n    if ('isStream' in options) {\n      this.isStream = options.isStream;\n    }\n    try {\n      let push = false;\n      for (const key in options) {\n        // `got.extend()` options\n        if (key === 'mutableDefaults' || key === 'handlers') {\n          continue;\n        }\n        // Never merge `url`\n        if (key === 'url') {\n          continue;\n        }\n        if (!(key in this)) {\n          throw new Error(\"Unexpected option: \".concat(key));\n        }\n        // @ts-expect-error Type 'unknown' is not assignable to type 'never'.\n        const value = options[key];\n        if (value === undefined) {\n          continue;\n        }\n        // @ts-expect-error Type 'unknown' is not assignable to type 'never'.\n        this[key] = value;\n        push = true;\n      }\n      if (push) {\n        this._init.push(options);\n      }\n    } finally {\n      this._merging = false;\n    }\n  }\n  /**\n  Custom request function.\n  The main purpose of this is to [support HTTP2 using a wrapper](https://github.com/szmarczak/http2-wrapper).\n   @default http.request | https.request\n  */\n  get request() {\n    return this._internals.request;\n  }\n  set request(value) {\n    assert.any([is.function, is.undefined], value);\n    this._internals.request = value;\n  }\n  /**\n  An object representing `http`, `https` and `http2` keys for [`http.Agent`](https://nodejs.org/api/http.html#http_class_http_agent), [`https.Agent`](https://nodejs.org/api/https.html#https_class_https_agent) and [`http2wrapper.Agent`](https://github.com/szmarczak/http2-wrapper#new-http2agentoptions) instance.\n  This is necessary because a request to one protocol might redirect to another.\n  In such a scenario, Got will switch over to the right protocol agent for you.\n   If a key is not present, it will default to a global agent.\n   @example\n  ```\n  import got from 'got';\n  import HttpAgent from 'agentkeepalive';\n   const {HttpsAgent} = HttpAgent;\n   await got('https://sindresorhus.com', {\n      agent: {\n          http: new HttpAgent(),\n          https: new HttpsAgent()\n      }\n  });\n  ```\n  */\n  get agent() {\n    return this._internals.agent;\n  }\n  set agent(value) {\n    assert.plainObject(value);\n    // eslint-disable-next-line guard-for-in\n    for (const key in value) {\n      if (!(key in this._internals.agent)) {\n        throw new TypeError(\"Unexpected agent option: \".concat(key));\n      }\n      // @ts-expect-error - No idea why `value[key]` doesn't work here.\n      assert.any([is.object, is.undefined], value[key]);\n    }\n    if (this._merging) {\n      Object.assign(this._internals.agent, value);\n    } else {\n      this._internals.agent = _objectSpread({}, value);\n    }\n  }\n  get h2session() {\n    return this._internals.h2session;\n  }\n  set h2session(value) {\n    this._internals.h2session = value;\n  }\n  /**\n  Decompress the response automatically.\n   This will set the `accept-encoding` header to `gzip, deflate, br` unless you set it yourself.\n   If this is disabled, a compressed response is returned as a `Buffer`.\n  This may be useful if you want to handle decompression yourself or stream the raw compressed data.\n   @default true\n  */\n  get decompress() {\n    return this._internals.decompress;\n  }\n  set decompress(value) {\n    assert.boolean(value);\n    this._internals.decompress = value;\n  }\n  /**\n  Milliseconds to wait for the server to end the response before aborting the request with `got.TimeoutError` error (a.k.a. `request` property).\n  By default, there's no timeout.\n   This also accepts an `object` with the following fields to constrain the duration of each phase of the request lifecycle:\n   - `lookup` starts when a socket is assigned and ends when the hostname has been resolved.\n      Does not apply when using a Unix domain socket.\n  - `connect` starts when `lookup` completes (or when the socket is assigned if lookup does not apply to the request) and ends when the socket is connected.\n  - `secureConnect` starts when `connect` completes and ends when the handshaking process completes (HTTPS only).\n  - `socket` starts when the socket is connected. See [request.setTimeout](https://nodejs.org/api/http.html#http_request_settimeout_timeout_callback).\n  - `response` starts when the request has been written to the socket and ends when the response headers are received.\n  - `send` starts when the socket is connected and ends with the request has been written to the socket.\n  - `request` starts when the request is initiated and ends when the response's end event fires.\n  */\n  get timeout() {\n    // We always return `Delays` here.\n    // It has to be `Delays | number`, otherwise TypeScript will error because the getter and the setter have incompatible types.\n    return this._internals.timeout;\n  }\n  set timeout(value) {\n    assert.plainObject(value);\n    // eslint-disable-next-line guard-for-in\n    for (const key in value) {\n      if (!(key in this._internals.timeout)) {\n        throw new Error(\"Unexpected timeout option: \".concat(key));\n      }\n      // @ts-expect-error - No idea why `value[key]` doesn't work here.\n      assert.any([is.number, is.undefined], value[key]);\n    }\n    if (this._merging) {\n      Object.assign(this._internals.timeout, value);\n    } else {\n      this._internals.timeout = _objectSpread({}, value);\n    }\n  }\n  /**\n  When specified, `prefixUrl` will be prepended to `url`.\n  The prefix can be any valid URL, either relative or absolute.\n  A trailing slash `/` is optional - one will be added automatically.\n   __Note__: `prefixUrl` will be ignored if the `url` argument is a URL instance.\n   __Note__: Leading slashes in `input` are disallowed when using this option to enforce consistency and avoid confusion.\n  For example, when the prefix URL is `https://example.com/foo` and the input is `/bar`, there's ambiguity whether the resulting URL would become `https://example.com/foo/bar` or `https://example.com/bar`.\n  The latter is used by browsers.\n   __Tip__: Useful when used with `got.extend()` to create niche-specific Got instances.\n   __Tip__: You can change `prefixUrl` using hooks as long as the URL still includes the `prefixUrl`.\n  If the URL doesn't include it anymore, it will throw.\n   @example\n  ```\n  import got from 'got';\n   await got('unicorn', {prefixUrl: 'https://cats.com'});\n  //=> 'https://cats.com/unicorn'\n   const instance = got.extend({\n      prefixUrl: 'https://google.com'\n  });\n   await instance('unicorn', {\n      hooks: {\n          beforeRequest: [\n              options => {\n                  options.prefixUrl = 'https://cats.com';\n              }\n          ]\n      }\n  });\n  //=> 'https://cats.com/unicorn'\n  ```\n  */\n  get prefixUrl() {\n    // We always return `string` here.\n    // It has to be `string | URL`, otherwise TypeScript will error because the getter and the setter have incompatible types.\n    return this._internals.prefixUrl;\n  }\n  set prefixUrl(value) {\n    assert.any([is.string, is.urlInstance], value);\n    if (value === '') {\n      this._internals.prefixUrl = '';\n      return;\n    }\n    value = value.toString();\n    if (!value.endsWith('/')) {\n      value += '/';\n    }\n    if (this._internals.prefixUrl && this._internals.url) {\n      const {\n        href\n      } = this._internals.url;\n      this._internals.url.href = value + href.slice(this._internals.prefixUrl.length);\n    }\n    this._internals.prefixUrl = value;\n  }\n  /**\n  __Note #1__: The `body` option cannot be used with the `json` or `form` option.\n   __Note #2__: If you provide this option, `got.stream()` will be read-only.\n   __Note #3__: If you provide a payload with the `GET` or `HEAD` method, it will throw a `TypeError` unless the method is `GET` and the `allowGetBody` option is set to `true`.\n   __Note #4__: This option is not enumerable and will not be merged with the instance defaults.\n   The `content-length` header will be automatically set if `body` is a `string` / `Buffer` / [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) / [`form-data` instance](https://github.com/form-data/form-data), and `content-length` and `transfer-encoding` are not manually set in `options.headers`.\n   Since Got 12, the `content-length` is not automatically set when `body` is a `fs.createReadStream`.\n  */\n  get body() {\n    return this._internals.body;\n  }\n  set body(value) {\n    assert.any([is.string, is.buffer, is.nodeStream, is.generator, is.asyncGenerator, isFormData, is.undefined], value);\n    if (is.nodeStream(value)) {\n      assert.truthy(value.readable);\n    }\n    if (value !== undefined) {\n      assert.undefined(this._internals.form);\n      assert.undefined(this._internals.json);\n    }\n    this._internals.body = value;\n  }\n  /**\n  The form body is converted to a query string using [`(new URLSearchParams(object)).toString()`](https://nodejs.org/api/url.html#url_constructor_new_urlsearchparams_obj).\n   If the `Content-Type` header is not present, it will be set to `application/x-www-form-urlencoded`.\n   __Note #1__: If you provide this option, `got.stream()` will be read-only.\n   __Note #2__: This option is not enumerable and will not be merged with the instance defaults.\n  */\n  get form() {\n    return this._internals.form;\n  }\n  set form(value) {\n    assert.any([is.plainObject, is.undefined], value);\n    if (value !== undefined) {\n      assert.undefined(this._internals.body);\n      assert.undefined(this._internals.json);\n    }\n    this._internals.form = value;\n  }\n  /**\n  JSON body. If the `Content-Type` header is not set, it will be set to `application/json`.\n   __Note #1__: If you provide this option, `got.stream()` will be read-only.\n   __Note #2__: This option is not enumerable and will not be merged with the instance defaults.\n  */\n  get json() {\n    return this._internals.json;\n  }\n  set json(value) {\n    if (value !== undefined) {\n      assert.undefined(this._internals.body);\n      assert.undefined(this._internals.form);\n    }\n    this._internals.json = value;\n  }\n  /**\n  The URL to request, as a string, a [`https.request` options object](https://nodejs.org/api/https.html#https_https_request_options_callback), or a [WHATWG `URL`](https://nodejs.org/api/url.html#url_class_url).\n   Properties from `options` will override properties in the parsed `url`.\n   If no protocol is specified, it will throw a `TypeError`.\n   __Note__: The query string is **not** parsed as search params.\n   @example\n  ```\n  await got('https://example.com/?query=a b'); //=> https://example.com/?query=a%20b\n  await got('https://example.com/', {searchParams: {query: 'a b'}}); //=> https://example.com/?query=a+b\n   // The query string is overridden by `searchParams`\n  await got('https://example.com/?query=a b', {searchParams: {query: 'a b'}}); //=> https://example.com/?query=a+b\n  ```\n  */\n  get url() {\n    return this._internals.url;\n  }\n  set url(value) {\n    assert.any([is.string, is.urlInstance, is.undefined], value);\n    if (value === undefined) {\n      this._internals.url = undefined;\n      return;\n    }\n    if (is.string(value) && value.startsWith('/')) {\n      throw new Error('`url` must not start with a slash');\n    }\n    const urlString = \"\".concat(this.prefixUrl).concat(value.toString());\n    const url = new URL(urlString);\n    this._internals.url = url;\n    if (url.protocol === 'unix:') {\n      url.href = \"http://unix\".concat(url.pathname).concat(url.search);\n    }\n    if (url.protocol !== 'http:' && url.protocol !== 'https:') {\n      const error = new Error(\"Unsupported protocol: \".concat(url.protocol));\n      error.code = 'ERR_UNSUPPORTED_PROTOCOL';\n      throw error;\n    }\n    if (this._internals.username) {\n      url.username = this._internals.username;\n      this._internals.username = '';\n    }\n    if (this._internals.password) {\n      url.password = this._internals.password;\n      this._internals.password = '';\n    }\n    if (this._internals.searchParams) {\n      url.search = this._internals.searchParams.toString();\n      this._internals.searchParams = undefined;\n    }\n    if (url.hostname === 'unix') {\n      if (!this._internals.enableUnixSockets) {\n        throw new Error('Using UNIX domain sockets but option `enableUnixSockets` is not enabled');\n      }\n      const matches = /*#__PURE__*/_wrapRegExp(/(.+?):(.+)/, {\n        socketPath: 1,\n        path: 2\n      }).exec(\"\".concat(url.pathname).concat(url.search));\n      if (matches !== null && matches !== void 0 && matches.groups) {\n        const {\n          socketPath,\n          path\n        } = matches.groups;\n        this._unixOptions = {\n          socketPath,\n          path,\n          host: ''\n        };\n      } else {\n        this._unixOptions = undefined;\n      }\n      return;\n    }\n    this._unixOptions = undefined;\n  }\n  /**\n  Cookie support. You don't have to care about parsing or how to store them.\n   __Note__: If you provide this option, `options.headers.cookie` will be overridden.\n  */\n  get cookieJar() {\n    return this._internals.cookieJar;\n  }\n  set cookieJar(value) {\n    assert.any([is.object, is.undefined], value);\n    if (value === undefined) {\n      this._internals.cookieJar = undefined;\n      return;\n    }\n    let {\n      setCookie,\n      getCookieString\n    } = value;\n    assert.function(setCookie);\n    assert.function(getCookieString);\n    /* istanbul ignore next: Horrible `tough-cookie` v3 check */\n    if (setCookie.length === 4 && getCookieString.length === 0) {\n      setCookie = promisify(setCookie.bind(value));\n      getCookieString = promisify(getCookieString.bind(value));\n      this._internals.cookieJar = {\n        setCookie,\n        getCookieString: getCookieString\n      };\n    } else {\n      this._internals.cookieJar = value;\n    }\n  }\n  /**\n  You can abort the `request` using [`AbortController`](https://developer.mozilla.org/en-US/docs/Web/API/AbortController).\n   @example\n  ```\n  import got from 'got';\n   const abortController = new AbortController();\n   const request = got('https://httpbin.org/anything', {\n      signal: abortController.signal\n  });\n   setTimeout(() => {\n      abortController.abort();\n  }, 100);\n  ```\n  */\n  get signal() {\n    return this._internals.signal;\n  }\n  set signal(value) {\n    assert.object(value);\n    this._internals.signal = value;\n  }\n  /**\n  Ignore invalid cookies instead of throwing an error.\n  Only useful when the `cookieJar` option has been set. Not recommended.\n   @default false\n  */\n  get ignoreInvalidCookies() {\n    return this._internals.ignoreInvalidCookies;\n  }\n  set ignoreInvalidCookies(value) {\n    assert.boolean(value);\n    this._internals.ignoreInvalidCookies = value;\n  }\n  /**\n  Query string that will be added to the request URL.\n  This will override the query string in `url`.\n   If you need to pass in an array, you can do it using a `URLSearchParams` instance.\n   @example\n  ```\n  import got from 'got';\n   const searchParams = new URLSearchParams([['key', 'a'], ['key', 'b']]);\n   await got('https://example.com', {searchParams});\n   console.log(searchParams.toString());\n  //=> 'key=a&key=b'\n  ```\n  */\n  get searchParams() {\n    if (this._internals.url) {\n      return this._internals.url.searchParams;\n    }\n    if (this._internals.searchParams === undefined) {\n      this._internals.searchParams = new URLSearchParams();\n    }\n    return this._internals.searchParams;\n  }\n  set searchParams(value) {\n    assert.any([is.string, is.object, is.undefined], value);\n    const url = this._internals.url;\n    if (value === undefined) {\n      this._internals.searchParams = undefined;\n      if (url) {\n        url.search = '';\n      }\n      return;\n    }\n    const searchParameters = this.searchParams;\n    let updated;\n    if (is.string(value)) {\n      updated = new URLSearchParams(value);\n    } else if (value instanceof URLSearchParams) {\n      updated = value;\n    } else {\n      validateSearchParameters(value);\n      updated = new URLSearchParams();\n      // eslint-disable-next-line guard-for-in\n      for (const key in value) {\n        const entry = value[key];\n        if (entry === null) {\n          updated.append(key, '');\n        } else if (entry === undefined) {\n          searchParameters.delete(key);\n        } else {\n          updated.append(key, entry);\n        }\n      }\n    }\n    if (this._merging) {\n      // These keys will be replaced\n      for (const key of updated.keys()) {\n        searchParameters.delete(key);\n      }\n      for (const [key, value] of updated) {\n        searchParameters.append(key, value);\n      }\n    } else if (url) {\n      url.search = searchParameters.toString();\n    } else {\n      this._internals.searchParams = searchParameters;\n    }\n  }\n  get searchParameters() {\n    throw new Error('The `searchParameters` option does not exist. Use `searchParams` instead.');\n  }\n  set searchParameters(_value) {\n    throw new Error('The `searchParameters` option does not exist. Use `searchParams` instead.');\n  }\n  get dnsLookup() {\n    return this._internals.dnsLookup;\n  }\n  set dnsLookup(value) {\n    assert.any([is.function, is.undefined], value);\n    this._internals.dnsLookup = value;\n  }\n  /**\n  An instance of [`CacheableLookup`](https://github.com/szmarczak/cacheable-lookup) used for making DNS lookups.\n  Useful when making lots of requests to different *public* hostnames.\n   `CacheableLookup` uses `dns.resolver4(..)` and `dns.resolver6(...)` under the hood and fall backs to `dns.lookup(...)` when the first two fail, which may lead to additional delay.\n   __Note__: This should stay disabled when making requests to internal hostnames such as `localhost`, `database.local` etc.\n   @default false\n  */\n  get dnsCache() {\n    return this._internals.dnsCache;\n  }\n  set dnsCache(value) {\n    assert.any([is.object, is.boolean, is.undefined], value);\n    if (value === true) {\n      this._internals.dnsCache = getGlobalDnsCache();\n    } else if (value === false) {\n      this._internals.dnsCache = undefined;\n    } else {\n      this._internals.dnsCache = value;\n    }\n  }\n  /**\n  User data. `context` is shallow merged and enumerable. If it contains non-enumerable properties they will NOT be merged.\n   @example\n  ```\n  import got from 'got';\n   const instance = got.extend({\n      hooks: {\n          beforeRequest: [\n              options => {\n                  if (!options.context || !options.context.token) {\n                      throw new Error('Token required');\n                  }\n                   options.headers.token = options.context.token;\n              }\n          ]\n      }\n  });\n   const context = {\n      token: 'secret'\n  };\n   const response = await instance('https://httpbin.org/headers', {context});\n   // Let's see the headers\n  console.log(response.body);\n  ```\n  */\n  get context() {\n    return this._internals.context;\n  }\n  set context(value) {\n    assert.object(value);\n    if (this._merging) {\n      Object.assign(this._internals.context, value);\n    } else {\n      this._internals.context = _objectSpread({}, value);\n    }\n  }\n  /**\n  Hooks allow modifications during the request lifecycle.\n  Hook functions may be async and are run serially.\n  */\n  get hooks() {\n    return this._internals.hooks;\n  }\n  set hooks(value) {\n    assert.object(value);\n    // eslint-disable-next-line guard-for-in\n    for (const knownHookEvent in value) {\n      if (!(knownHookEvent in this._internals.hooks)) {\n        throw new Error(\"Unexpected hook event: \".concat(knownHookEvent));\n      }\n      const typedKnownHookEvent = knownHookEvent;\n      const hooks = value[typedKnownHookEvent];\n      assert.any([is.array, is.undefined], hooks);\n      if (hooks) {\n        for (const hook of hooks) {\n          assert.function(hook);\n        }\n      }\n      if (this._merging) {\n        if (hooks) {\n          // @ts-expect-error FIXME\n          this._internals.hooks[typedKnownHookEvent].push(...hooks);\n        }\n      } else {\n        if (!hooks) {\n          throw new Error(\"Missing hook event: \".concat(knownHookEvent));\n        }\n        // @ts-expect-error FIXME\n        this._internals.hooks[knownHookEvent] = [...hooks];\n      }\n    }\n  }\n  /**\n  Whether redirect responses should be followed automatically.\n   Optionally, pass a function to dynamically decide based on the response object.\n   Note that if a `303` is sent by the server in response to any request type (`POST`, `DELETE`, etc.), Got will automatically request the resource pointed to in the location header via `GET`.\n  This is in accordance with [the spec](https://tools.ietf.org/html/rfc7231#section-6.4.4). You can optionally turn on this behavior also for other redirect codes - see `methodRewriting`.\n   @default true\n  */\n  get followRedirect() {\n    return this._internals.followRedirect;\n  }\n  set followRedirect(value) {\n    assert.any([is.boolean, is.function], value);\n    this._internals.followRedirect = value;\n  }\n  get followRedirects() {\n    throw new TypeError('The `followRedirects` option does not exist. Use `followRedirect` instead.');\n  }\n  set followRedirects(_value) {\n    throw new TypeError('The `followRedirects` option does not exist. Use `followRedirect` instead.');\n  }\n  /**\n  If exceeded, the request will be aborted and a `MaxRedirectsError` will be thrown.\n   @default 10\n  */\n  get maxRedirects() {\n    return this._internals.maxRedirects;\n  }\n  set maxRedirects(value) {\n    assert.number(value);\n    this._internals.maxRedirects = value;\n  }\n  /**\n  A cache adapter instance for storing cached response data.\n   @default false\n  */\n  get cache() {\n    return this._internals.cache;\n  }\n  set cache(value) {\n    assert.any([is.object, is.string, is.boolean, is.undefined], value);\n    if (value === true) {\n      this._internals.cache = globalCache;\n    } else if (value === false) {\n      this._internals.cache = undefined;\n    } else {\n      this._internals.cache = value;\n    }\n  }\n  /**\n  Determines if a `got.HTTPError` is thrown for unsuccessful responses.\n   If this is disabled, requests that encounter an error status code will be resolved with the `response` instead of throwing.\n  This may be useful if you are checking for resource availability and are expecting error responses.\n   @default true\n  */\n  get throwHttpErrors() {\n    return this._internals.throwHttpErrors;\n  }\n  set throwHttpErrors(value) {\n    assert.boolean(value);\n    this._internals.throwHttpErrors = value;\n  }\n  get username() {\n    const url = this._internals.url;\n    const value = url ? url.username : this._internals.username;\n    return decodeURIComponent(value);\n  }\n  set username(value) {\n    assert.string(value);\n    const url = this._internals.url;\n    const fixedValue = encodeURIComponent(value);\n    if (url) {\n      url.username = fixedValue;\n    } else {\n      this._internals.username = fixedValue;\n    }\n  }\n  get password() {\n    const url = this._internals.url;\n    const value = url ? url.password : this._internals.password;\n    return decodeURIComponent(value);\n  }\n  set password(value) {\n    assert.string(value);\n    const url = this._internals.url;\n    const fixedValue = encodeURIComponent(value);\n    if (url) {\n      url.password = fixedValue;\n    } else {\n      this._internals.password = fixedValue;\n    }\n  }\n  /**\n  If set to `true`, Got will additionally accept HTTP2 requests.\n   It will choose either HTTP/1.1 or HTTP/2 depending on the ALPN protocol.\n   __Note__: This option requires Node.js 15.10.0 or newer as HTTP/2 support on older Node.js versions is very buggy.\n   __Note__: Overriding `options.request` will disable HTTP2 support.\n   @default false\n   @example\n  ```\n  import got from 'got';\n   const {headers} = await got('https://nghttp2.org/httpbin/anything', {http2: true});\n   console.log(headers.via);\n  //=> '2 nghttpx'\n  ```\n  */\n  get http2() {\n    return this._internals.http2;\n  }\n  set http2(value) {\n    assert.boolean(value);\n    this._internals.http2 = value;\n  }\n  /**\n  Set this to `true` to allow sending body for the `GET` method.\n  However, the [HTTP/2 specification](https://tools.ietf.org/html/rfc7540#section-8.1.3) says that `An HTTP GET request includes request header fields and no payload body`, therefore when using the HTTP/2 protocol this option will have no effect.\n  This option is only meant to interact with non-compliant servers when you have no other choice.\n   __Note__: The [RFC 7231](https://tools.ietf.org/html/rfc7231#section-4.3.1) doesn't specify any particular behavior for the GET method having a payload, therefore __it's considered an [anti-pattern](https://en.wikipedia.org/wiki/Anti-pattern)__.\n   @default false\n  */\n  get allowGetBody() {\n    return this._internals.allowGetBody;\n  }\n  set allowGetBody(value) {\n    assert.boolean(value);\n    this._internals.allowGetBody = value;\n  }\n  /**\n  Request headers.\n   Existing headers will be overwritten. Headers set to `undefined` will be omitted.\n   @default {}\n  */\n  get headers() {\n    return this._internals.headers;\n  }\n  set headers(value) {\n    assert.plainObject(value);\n    if (this._merging) {\n      Object.assign(this._internals.headers, lowercaseKeys(value));\n    } else {\n      this._internals.headers = lowercaseKeys(value);\n    }\n  }\n  /**\n  Specifies if the HTTP request method should be [rewritten as `GET`](https://tools.ietf.org/html/rfc7231#section-6.4) on redirects.\n   As the [specification](https://tools.ietf.org/html/rfc7231#section-6.4) prefers to rewrite the HTTP method only on `303` responses, this is Got's default behavior.\n  Setting `methodRewriting` to `true` will also rewrite `301` and `302` responses, as allowed by the spec. This is the behavior followed by `curl` and browsers.\n   __Note__: Got never performs method rewriting on `307` and `308` responses, as this is [explicitly prohibited by the specification](https://www.rfc-editor.org/rfc/rfc7231#section-6.4.7).\n   @default false\n  */\n  get methodRewriting() {\n    return this._internals.methodRewriting;\n  }\n  set methodRewriting(value) {\n    assert.boolean(value);\n    this._internals.methodRewriting = value;\n  }\n  /**\n  Indicates which DNS record family to use.\n   Values:\n  - `undefined`: IPv4 (if present) or IPv6\n  - `4`: Only IPv4\n  - `6`: Only IPv6\n   @default undefined\n  */\n  get dnsLookupIpVersion() {\n    return this._internals.dnsLookupIpVersion;\n  }\n  set dnsLookupIpVersion(value) {\n    if (value !== undefined && value !== 4 && value !== 6) {\n      throw new TypeError(\"Invalid DNS lookup IP version: \".concat(value));\n    }\n    this._internals.dnsLookupIpVersion = value;\n  }\n  /**\n  A function used to parse JSON responses.\n   @example\n  ```\n  import got from 'got';\n  import Bourne from '@hapi/bourne';\n   const parsed = await got('https://example.com', {\n      parseJson: text => Bourne.parse(text)\n  }).json();\n   console.log(parsed);\n  ```\n  */\n  get parseJson() {\n    return this._internals.parseJson;\n  }\n  set parseJson(value) {\n    assert.function(value);\n    this._internals.parseJson = value;\n  }\n  /**\n  A function used to stringify the body of JSON requests.\n   @example\n  ```\n  import got from 'got';\n   await got.post('https://example.com', {\n      stringifyJson: object => JSON.stringify(object, (key, value) => {\n          if (key.startsWith('_')) {\n              return;\n          }\n           return value;\n      }),\n      json: {\n          some: 'payload',\n          _ignoreMe: 1234\n      }\n  });\n  ```\n   @example\n  ```\n  import got from 'got';\n   await got.post('https://example.com', {\n      stringifyJson: object => JSON.stringify(object, (key, value) => {\n          if (typeof value === 'number') {\n              return value.toString();\n          }\n           return value;\n      }),\n      json: {\n          some: 'payload',\n          number: 1\n      }\n  });\n  ```\n  */\n  get stringifyJson() {\n    return this._internals.stringifyJson;\n  }\n  set stringifyJson(value) {\n    assert.function(value);\n    this._internals.stringifyJson = value;\n  }\n  /**\n  An object representing `limit`, `calculateDelay`, `methods`, `statusCodes`, `maxRetryAfter` and `errorCodes` fields for maximum retry count, retry handler, allowed methods, allowed status codes, maximum [`Retry-After`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After) time and allowed error codes.\n   Delays between retries counts with function `1000 * Math.pow(2, retry) + Math.random() * 100`, where `retry` is attempt number (starts from 1).\n   The `calculateDelay` property is a `function` that receives an object with `attemptCount`, `retryOptions`, `error` and `computedValue` properties for current retry count, the retry options, error and default computed value.\n  The function must return a delay in milliseconds (or a Promise resolving with it) (`0` return value cancels retry).\n   By default, it retries *only* on the specified methods, status codes, and on these network errors:\n   - `ETIMEDOUT`: One of the [timeout](#timeout) limits were reached.\n  - `ECONNRESET`: Connection was forcibly closed by a peer.\n  - `EADDRINUSE`: Could not bind to any free port.\n  - `ECONNREFUSED`: Connection was refused by the server.\n  - `EPIPE`: The remote side of the stream being written has been closed.\n  - `ENOTFOUND`: Couldn't resolve the hostname to an IP address.\n  - `ENETUNREACH`: No internet connection.\n  - `EAI_AGAIN`: DNS lookup timed out.\n   __Note__: If `maxRetryAfter` is set to `undefined`, it will use `options.timeout`.\n  __Note__: If [`Retry-After`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After) header is greater than `maxRetryAfter`, it will cancel the request.\n  */\n  get retry() {\n    return this._internals.retry;\n  }\n  set retry(value) {\n    assert.plainObject(value);\n    assert.any([is.function, is.undefined], value.calculateDelay);\n    assert.any([is.number, is.undefined], value.maxRetryAfter);\n    assert.any([is.number, is.undefined], value.limit);\n    assert.any([is.array, is.undefined], value.methods);\n    assert.any([is.array, is.undefined], value.statusCodes);\n    assert.any([is.array, is.undefined], value.errorCodes);\n    assert.any([is.number, is.undefined], value.noise);\n    if (value.noise && Math.abs(value.noise) > 100) {\n      throw new Error(\"The maximum acceptable retry noise is +/- 100ms, got \".concat(value.noise));\n    }\n    for (const key in value) {\n      if (!(key in this._internals.retry)) {\n        throw new Error(\"Unexpected retry option: \".concat(key));\n      }\n    }\n    if (this._merging) {\n      Object.assign(this._internals.retry, value);\n    } else {\n      this._internals.retry = _objectSpread({}, value);\n    }\n    const {\n      retry\n    } = this._internals;\n    retry.methods = [...new Set(retry.methods.map(method => method.toUpperCase()))];\n    retry.statusCodes = [...new Set(retry.statusCodes)];\n    retry.errorCodes = [...new Set(retry.errorCodes)];\n  }\n  /**\n  From `http.RequestOptions`.\n   The IP address used to send the request from.\n  */\n  get localAddress() {\n    return this._internals.localAddress;\n  }\n  set localAddress(value) {\n    assert.any([is.string, is.undefined], value);\n    this._internals.localAddress = value;\n  }\n  /**\n  The HTTP method used to make the request.\n   @default 'GET'\n  */\n  get method() {\n    return this._internals.method;\n  }\n  set method(value) {\n    assert.string(value);\n    this._internals.method = value.toUpperCase();\n  }\n  get createConnection() {\n    return this._internals.createConnection;\n  }\n  set createConnection(value) {\n    assert.any([is.function, is.undefined], value);\n    this._internals.createConnection = value;\n  }\n  /**\n  From `http-cache-semantics`\n   @default {}\n  */\n  get cacheOptions() {\n    return this._internals.cacheOptions;\n  }\n  set cacheOptions(value) {\n    assert.plainObject(value);\n    assert.any([is.boolean, is.undefined], value.shared);\n    assert.any([is.number, is.undefined], value.cacheHeuristic);\n    assert.any([is.number, is.undefined], value.immutableMinTimeToLive);\n    assert.any([is.boolean, is.undefined], value.ignoreCargoCult);\n    for (const key in value) {\n      if (!(key in this._internals.cacheOptions)) {\n        throw new Error(\"Cache option `\".concat(key, \"` does not exist\"));\n      }\n    }\n    if (this._merging) {\n      Object.assign(this._internals.cacheOptions, value);\n    } else {\n      this._internals.cacheOptions = _objectSpread({}, value);\n    }\n  }\n  /**\n  Options for the advanced HTTPS API.\n  */\n  get https() {\n    return this._internals.https;\n  }\n  set https(value) {\n    assert.plainObject(value);\n    assert.any([is.boolean, is.undefined], value.rejectUnauthorized);\n    assert.any([is.function, is.undefined], value.checkServerIdentity);\n    assert.any([is.string, is.object, is.array, is.undefined], value.certificateAuthority);\n    assert.any([is.string, is.object, is.array, is.undefined], value.key);\n    assert.any([is.string, is.object, is.array, is.undefined], value.certificate);\n    assert.any([is.string, is.undefined], value.passphrase);\n    assert.any([is.string, is.buffer, is.array, is.undefined], value.pfx);\n    assert.any([is.array, is.undefined], value.alpnProtocols);\n    assert.any([is.string, is.undefined], value.ciphers);\n    assert.any([is.string, is.buffer, is.undefined], value.dhparam);\n    assert.any([is.string, is.undefined], value.signatureAlgorithms);\n    assert.any([is.string, is.undefined], value.minVersion);\n    assert.any([is.string, is.undefined], value.maxVersion);\n    assert.any([is.boolean, is.undefined], value.honorCipherOrder);\n    assert.any([is.number, is.undefined], value.tlsSessionLifetime);\n    assert.any([is.string, is.undefined], value.ecdhCurve);\n    assert.any([is.string, is.buffer, is.array, is.undefined], value.certificateRevocationLists);\n    for (const key in value) {\n      if (!(key in this._internals.https)) {\n        throw new Error(\"HTTPS option `\".concat(key, \"` does not exist\"));\n      }\n    }\n    if (this._merging) {\n      Object.assign(this._internals.https, value);\n    } else {\n      this._internals.https = _objectSpread({}, value);\n    }\n  }\n  /**\n  [Encoding](https://nodejs.org/api/buffer.html#buffer_buffers_and_character_encodings) to be used on `setEncoding` of the response data.\n   To get a [`Buffer`](https://nodejs.org/api/buffer.html), you need to set `responseType` to `buffer` instead.\n  Don't set this option to `null`.\n   __Note__: This doesn't affect streams! Instead, you need to do `got.stream(...).setEncoding(encoding)`.\n   @default 'utf-8'\n  */\n  get encoding() {\n    return this._internals.encoding;\n  }\n  set encoding(value) {\n    if (value === null) {\n      throw new TypeError('To get a Buffer, set `options.responseType` to `buffer` instead');\n    }\n    assert.any([is.string, is.undefined], value);\n    this._internals.encoding = value;\n  }\n  /**\n  When set to `true` the promise will return the Response body instead of the Response object.\n   @default false\n  */\n  get resolveBodyOnly() {\n    return this._internals.resolveBodyOnly;\n  }\n  set resolveBodyOnly(value) {\n    assert.boolean(value);\n    this._internals.resolveBodyOnly = value;\n  }\n  /**\n  Returns a `Stream` instead of a `Promise`.\n  This is equivalent to calling `got.stream(url, options?)`.\n   @default false\n  */\n  get isStream() {\n    return this._internals.isStream;\n  }\n  set isStream(value) {\n    assert.boolean(value);\n    this._internals.isStream = value;\n  }\n  /**\n  The parsing method.\n   The promise also has `.text()`, `.json()` and `.buffer()` methods which return another Got promise for the parsed body.\n   It's like setting the options to `{responseType: 'json', resolveBodyOnly: true}` but without affecting the main Got promise.\n   __Note__: When using streams, this option is ignored.\n   @example\n  ```\n  const responsePromise = got(url);\n  const bufferPromise = responsePromise.buffer();\n  const jsonPromise = responsePromise.json();\n   const [response, buffer, json] = Promise.all([responsePromise, bufferPromise, jsonPromise]);\n  // `response` is an instance of Got Response\n  // `buffer` is an instance of Buffer\n  // `json` is an object\n  ```\n   @example\n  ```\n  // This\n  const body = await got(url).json();\n   // is semantically the same as this\n  const body = await got(url, {responseType: 'json', resolveBodyOnly: true});\n  ```\n  */\n  get responseType() {\n    return this._internals.responseType;\n  }\n  set responseType(value) {\n    if (value === undefined) {\n      this._internals.responseType = 'text';\n      return;\n    }\n    if (value !== 'text' && value !== 'buffer' && value !== 'json') {\n      throw new Error(\"Invalid `responseType` option: \".concat(value));\n    }\n    this._internals.responseType = value;\n  }\n  get pagination() {\n    return this._internals.pagination;\n  }\n  set pagination(value) {\n    assert.object(value);\n    if (this._merging) {\n      Object.assign(this._internals.pagination, value);\n    } else {\n      this._internals.pagination = value;\n    }\n  }\n  get auth() {\n    throw new Error('Parameter `auth` is deprecated. Use `username` / `password` instead.');\n  }\n  set auth(_value) {\n    throw new Error('Parameter `auth` is deprecated. Use `username` / `password` instead.');\n  }\n  get setHost() {\n    return this._internals.setHost;\n  }\n  set setHost(value) {\n    assert.boolean(value);\n    this._internals.setHost = value;\n  }\n  get maxHeaderSize() {\n    return this._internals.maxHeaderSize;\n  }\n  set maxHeaderSize(value) {\n    assert.any([is.number, is.undefined], value);\n    this._internals.maxHeaderSize = value;\n  }\n  get enableUnixSockets() {\n    return this._internals.enableUnixSockets;\n  }\n  set enableUnixSockets(value) {\n    assert.boolean(value);\n    this._internals.enableUnixSockets = value;\n  }\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  toJSON() {\n    return _objectSpread({}, this._internals);\n  }\n  [Symbol.for('nodejs.util.inspect.custom')](_depth, options) {\n    return inspect(this._internals, options);\n  }\n  createNativeRequestOptions() {\n    var _https$checkServerIde, _internals$dnsLookup, _internals$dnsCache;\n    const internals = this._internals;\n    const url = internals.url;\n    let agent;\n    if (url.protocol === 'https:') {\n      agent = internals.http2 ? internals.agent : internals.agent.https;\n    } else {\n      agent = internals.agent.http;\n    }\n    const {\n      https\n    } = internals;\n    let {\n      pfx\n    } = https;\n    if (is.array(pfx) && is.plainObject(pfx[0])) {\n      pfx = pfx.map(object => ({\n        buf: object.buffer,\n        passphrase: object.passphrase\n      }));\n    }\n    return _objectSpread(_objectSpread(_objectSpread({}, internals.cacheOptions), this._unixOptions), {}, {\n      // HTTPS options\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      ALPNProtocols: https.alpnProtocols,\n      ca: https.certificateAuthority,\n      cert: https.certificate,\n      key: https.key,\n      passphrase: https.passphrase,\n      pfx: https.pfx,\n      rejectUnauthorized: https.rejectUnauthorized,\n      checkServerIdentity: (_https$checkServerIde = https.checkServerIdentity) !== null && _https$checkServerIde !== void 0 ? _https$checkServerIde : checkServerIdentity,\n      ciphers: https.ciphers,\n      honorCipherOrder: https.honorCipherOrder,\n      minVersion: https.minVersion,\n      maxVersion: https.maxVersion,\n      sigalgs: https.signatureAlgorithms,\n      sessionTimeout: https.tlsSessionLifetime,\n      dhparam: https.dhparam,\n      ecdhCurve: https.ecdhCurve,\n      crl: https.certificateRevocationLists,\n      // HTTP options\n      lookup: (_internals$dnsLookup = internals.dnsLookup) !== null && _internals$dnsLookup !== void 0 ? _internals$dnsLookup : (_internals$dnsCache = internals.dnsCache) === null || _internals$dnsCache === void 0 ? void 0 : _internals$dnsCache.lookup,\n      family: internals.dnsLookupIpVersion,\n      agent,\n      setHost: internals.setHost,\n      method: internals.method,\n      maxHeaderSize: internals.maxHeaderSize,\n      localAddress: internals.localAddress,\n      headers: internals.headers,\n      createConnection: internals.createConnection,\n      timeout: internals.http2 ? getHttp2TimeoutOption(internals) : undefined,\n      // HTTP/2 options\n      h2session: internals.h2session\n    });\n  }\n  getRequestFunction() {\n    const url = this._internals.url;\n    const {\n      request\n    } = this._internals;\n    if (!request && url) {\n      return this.getFallbackRequestFunction();\n    }\n    return request;\n  }\n  getFallbackRequestFunction() {\n    const url = this._internals.url;\n    if (!url) {\n      return;\n    }\n    if (url.protocol === 'https:') {\n      if (this._internals.http2) {\n        if (major < 15 || major === 15 && minor < 10) {\n          const error = new Error('To use the `http2` option, install Node.js 15.10.0 or above');\n          error.code = 'EUNSUPPORTED';\n          throw error;\n        }\n        return http2wrapper.auto;\n      }\n      return https.request;\n    }\n    return http.request;\n  }\n  freeze() {\n    const options = this._internals;\n    Object.freeze(options);\n    Object.freeze(options.hooks);\n    Object.freeze(options.hooks.afterResponse);\n    Object.freeze(options.hooks.beforeError);\n    Object.freeze(options.hooks.beforeRedirect);\n    Object.freeze(options.hooks.beforeRequest);\n    Object.freeze(options.hooks.beforeRetry);\n    Object.freeze(options.hooks.init);\n    Object.freeze(options.https);\n    Object.freeze(options.cacheOptions);\n    Object.freeze(options.agent);\n    Object.freeze(options.headers);\n    Object.freeze(options.timeout);\n    Object.freeze(options.retry);\n    Object.freeze(options.retry.errorCodes);\n    Object.freeze(options.retry.methods);\n    Object.freeze(options.retry.statusCodes);\n  }\n}","map":{"version":3,"names":["process","promisify","inspect","checkServerIdentity","https","http","is","assert","lowercaseKeys","CacheableLookup","http2wrapper","isFormData","parseLinkHeader","major","minor","versions","node","split","map","Number","validateSearchParameters","searchParameters","key","value","any","string","number","boolean","null","undefined","globalCache","Map","globalDnsCache","getGlobalDnsCache","defaultInternals","request","agent","http2","h2session","decompress","timeout","connect","lookup","read","response","secureConnect","send","socket","prefixUrl","body","form","json","cookieJar","ignoreInvalidCookies","searchParams","dnsLookup","dnsCache","context","hooks","init","beforeRequest","beforeError","beforeRedirect","beforeRetry","afterResponse","followRedirect","maxRedirects","cache","throwHttpErrors","username","password","allowGetBody","headers","methodRewriting","dnsLookupIpVersion","parseJson","JSON","parse","stringifyJson","stringify","retry","limit","methods","statusCodes","errorCodes","maxRetryAfter","calculateDelay","_ref","computedValue","backoffLimit","POSITIVE_INFINITY","noise","localAddress","method","createConnection","cacheOptions","shared","cacheHeuristic","immutableMinTimeToLive","ignoreCargoCult","alpnProtocols","rejectUnauthorized","certificateAuthority","certificate","passphrase","pfx","ciphers","honorCipherOrder","minVersion","maxVersion","signatureAlgorithms","tlsSessionLifetime","dhparam","ecdhCurve","certificateRevocationLists","encoding","resolveBodyOnly","isStream","responseType","url","pagination","transform","options","paginate","_ref2","rawLinkHeader","link","trim","parsed","next","find","entry","parameters","rel","URL","reference","filter","shouldContinue","countLimit","backoff","requestLimit","stackAllItems","setHost","maxHeaderSize","signal","enableUnixSockets","cloneInternals","internals","result","_objectSpread","URLSearchParams","cloneRaw","raw","object","array","getHttp2TimeoutOption","delays","delay","length","Math","min","withOptions","self","_options$hooks","initHooks","hook","Options","constructor","input","defaults","_ref3","_defaults$_internals","_defaults$_init","_defineProperty","urlInstance","TypeError","_internals","_init","_merging","_unixOptions","plainObject","merge","error","push","Error","concat","function","Object","assign","toString","endsWith","href","slice","buffer","nodeStream","generator","asyncGenerator","truthy","readable","startsWith","urlString","protocol","pathname","search","code","hostname","matches","_wrapRegExp","socketPath","path","exec","groups","host","setCookie","getCookieString","bind","updated","append","delete","keys","_value","knownHookEvent","typedKnownHookEvent","followRedirects","decodeURIComponent","fixedValue","encodeURIComponent","abs","Set","toUpperCase","auth","toJSON","Symbol","for","_depth","createNativeRequestOptions","_https$checkServerIde","_internals$dnsLookup","_internals$dnsCache","buf","ALPNProtocols","ca","cert","sigalgs","sessionTimeout","crl","family","getRequestFunction","getFallbackRequestFunction","auto","freeze"],"sources":["C:/Users/sakas/OneDrive/Desktop/gogo/node_modules/got/dist/source/core/options.js"],"sourcesContent":["import process from 'node:process';\nimport { promisify, inspect } from 'node:util';\nimport { checkServerIdentity } from 'node:tls';\n// DO NOT use destructuring for `https.request` and `http.request` as it's not compatible with `nock`.\nimport https from 'node:https';\nimport http from 'node:http';\nimport is, { assert } from '@sindresorhus/is';\nimport lowercaseKeys from 'lowercase-keys';\nimport CacheableLookup from 'cacheable-lookup';\nimport http2wrapper from 'http2-wrapper';\nimport { isFormData } from 'form-data-encoder';\nimport parseLinkHeader from './parse-link-header.js';\nconst [major, minor] = process.versions.node.split('.').map(Number);\nfunction validateSearchParameters(searchParameters) {\n    // eslint-disable-next-line guard-for-in\n    for (const key in searchParameters) {\n        const value = searchParameters[key];\n        assert.any([is.string, is.number, is.boolean, is.null, is.undefined], value);\n    }\n}\nconst globalCache = new Map();\nlet globalDnsCache;\nconst getGlobalDnsCache = () => {\n    if (globalDnsCache) {\n        return globalDnsCache;\n    }\n    globalDnsCache = new CacheableLookup();\n    return globalDnsCache;\n};\nconst defaultInternals = {\n    request: undefined,\n    agent: {\n        http: undefined,\n        https: undefined,\n        http2: undefined,\n    },\n    h2session: undefined,\n    decompress: true,\n    timeout: {\n        connect: undefined,\n        lookup: undefined,\n        read: undefined,\n        request: undefined,\n        response: undefined,\n        secureConnect: undefined,\n        send: undefined,\n        socket: undefined,\n    },\n    prefixUrl: '',\n    body: undefined,\n    form: undefined,\n    json: undefined,\n    cookieJar: undefined,\n    ignoreInvalidCookies: false,\n    searchParams: undefined,\n    dnsLookup: undefined,\n    dnsCache: undefined,\n    context: {},\n    hooks: {\n        init: [],\n        beforeRequest: [],\n        beforeError: [],\n        beforeRedirect: [],\n        beforeRetry: [],\n        afterResponse: [],\n    },\n    followRedirect: true,\n    maxRedirects: 10,\n    cache: undefined,\n    throwHttpErrors: true,\n    username: '',\n    password: '',\n    http2: false,\n    allowGetBody: false,\n    headers: {\n        'user-agent': 'got (https://github.com/sindresorhus/got)',\n    },\n    methodRewriting: false,\n    dnsLookupIpVersion: undefined,\n    parseJson: JSON.parse,\n    stringifyJson: JSON.stringify,\n    retry: {\n        limit: 2,\n        methods: [\n            'GET',\n            'PUT',\n            'HEAD',\n            'DELETE',\n            'OPTIONS',\n            'TRACE',\n        ],\n        statusCodes: [\n            408,\n            413,\n            429,\n            500,\n            502,\n            503,\n            504,\n            521,\n            522,\n            524,\n        ],\n        errorCodes: [\n            'ETIMEDOUT',\n            'ECONNRESET',\n            'EADDRINUSE',\n            'ECONNREFUSED',\n            'EPIPE',\n            'ENOTFOUND',\n            'ENETUNREACH',\n            'EAI_AGAIN',\n        ],\n        maxRetryAfter: undefined,\n        calculateDelay: ({ computedValue }) => computedValue,\n        backoffLimit: Number.POSITIVE_INFINITY,\n        noise: 100,\n    },\n    localAddress: undefined,\n    method: 'GET',\n    createConnection: undefined,\n    cacheOptions: {\n        shared: undefined,\n        cacheHeuristic: undefined,\n        immutableMinTimeToLive: undefined,\n        ignoreCargoCult: undefined,\n    },\n    https: {\n        alpnProtocols: undefined,\n        rejectUnauthorized: undefined,\n        checkServerIdentity: undefined,\n        certificateAuthority: undefined,\n        key: undefined,\n        certificate: undefined,\n        passphrase: undefined,\n        pfx: undefined,\n        ciphers: undefined,\n        honorCipherOrder: undefined,\n        minVersion: undefined,\n        maxVersion: undefined,\n        signatureAlgorithms: undefined,\n        tlsSessionLifetime: undefined,\n        dhparam: undefined,\n        ecdhCurve: undefined,\n        certificateRevocationLists: undefined,\n    },\n    encoding: undefined,\n    resolveBodyOnly: false,\n    isStream: false,\n    responseType: 'text',\n    url: undefined,\n    pagination: {\n        transform(response) {\n            if (response.request.options.responseType === 'json') {\n                return response.body;\n            }\n            return JSON.parse(response.body);\n        },\n        paginate({ response }) {\n            const rawLinkHeader = response.headers.link;\n            if (typeof rawLinkHeader !== 'string' || rawLinkHeader.trim() === '') {\n                return false;\n            }\n            const parsed = parseLinkHeader(rawLinkHeader);\n            const next = parsed.find(entry => entry.parameters.rel === 'next' || entry.parameters.rel === '\"next\"');\n            if (next) {\n                return {\n                    url: new URL(next.reference, response.url),\n                };\n            }\n            return false;\n        },\n        filter: () => true,\n        shouldContinue: () => true,\n        countLimit: Number.POSITIVE_INFINITY,\n        backoff: 0,\n        requestLimit: 10_000,\n        stackAllItems: false,\n    },\n    setHost: true,\n    maxHeaderSize: undefined,\n    signal: undefined,\n    enableUnixSockets: false,\n};\nconst cloneInternals = (internals) => {\n    const { hooks, retry } = internals;\n    const result = {\n        ...internals,\n        context: { ...internals.context },\n        cacheOptions: { ...internals.cacheOptions },\n        https: { ...internals.https },\n        agent: { ...internals.agent },\n        headers: { ...internals.headers },\n        retry: {\n            ...retry,\n            errorCodes: [...retry.errorCodes],\n            methods: [...retry.methods],\n            statusCodes: [...retry.statusCodes],\n        },\n        timeout: { ...internals.timeout },\n        hooks: {\n            init: [...hooks.init],\n            beforeRequest: [...hooks.beforeRequest],\n            beforeError: [...hooks.beforeError],\n            beforeRedirect: [...hooks.beforeRedirect],\n            beforeRetry: [...hooks.beforeRetry],\n            afterResponse: [...hooks.afterResponse],\n        },\n        searchParams: internals.searchParams ? new URLSearchParams(internals.searchParams) : undefined,\n        pagination: { ...internals.pagination },\n    };\n    if (result.url !== undefined) {\n        result.prefixUrl = '';\n    }\n    return result;\n};\nconst cloneRaw = (raw) => {\n    const { hooks, retry } = raw;\n    const result = { ...raw };\n    if (is.object(raw.context)) {\n        result.context = { ...raw.context };\n    }\n    if (is.object(raw.cacheOptions)) {\n        result.cacheOptions = { ...raw.cacheOptions };\n    }\n    if (is.object(raw.https)) {\n        result.https = { ...raw.https };\n    }\n    if (is.object(raw.cacheOptions)) {\n        result.cacheOptions = { ...result.cacheOptions };\n    }\n    if (is.object(raw.agent)) {\n        result.agent = { ...raw.agent };\n    }\n    if (is.object(raw.headers)) {\n        result.headers = { ...raw.headers };\n    }\n    if (is.object(retry)) {\n        result.retry = { ...retry };\n        if (is.array(retry.errorCodes)) {\n            result.retry.errorCodes = [...retry.errorCodes];\n        }\n        if (is.array(retry.methods)) {\n            result.retry.methods = [...retry.methods];\n        }\n        if (is.array(retry.statusCodes)) {\n            result.retry.statusCodes = [...retry.statusCodes];\n        }\n    }\n    if (is.object(raw.timeout)) {\n        result.timeout = { ...raw.timeout };\n    }\n    if (is.object(hooks)) {\n        result.hooks = {\n            ...hooks,\n        };\n        if (is.array(hooks.init)) {\n            result.hooks.init = [...hooks.init];\n        }\n        if (is.array(hooks.beforeRequest)) {\n            result.hooks.beforeRequest = [...hooks.beforeRequest];\n        }\n        if (is.array(hooks.beforeError)) {\n            result.hooks.beforeError = [...hooks.beforeError];\n        }\n        if (is.array(hooks.beforeRedirect)) {\n            result.hooks.beforeRedirect = [...hooks.beforeRedirect];\n        }\n        if (is.array(hooks.beforeRetry)) {\n            result.hooks.beforeRetry = [...hooks.beforeRetry];\n        }\n        if (is.array(hooks.afterResponse)) {\n            result.hooks.afterResponse = [...hooks.afterResponse];\n        }\n    }\n    // TODO: raw.searchParams\n    if (is.object(raw.pagination)) {\n        result.pagination = { ...raw.pagination };\n    }\n    return result;\n};\nconst getHttp2TimeoutOption = (internals) => {\n    const delays = [internals.timeout.socket, internals.timeout.connect, internals.timeout.lookup, internals.timeout.request, internals.timeout.secureConnect].filter(delay => typeof delay === 'number');\n    if (delays.length > 0) {\n        return Math.min(...delays);\n    }\n    return undefined;\n};\nconst init = (options, withOptions, self) => {\n    const initHooks = options.hooks?.init;\n    if (initHooks) {\n        for (const hook of initHooks) {\n            hook(withOptions, self);\n        }\n    }\n};\nexport default class Options {\n    _unixOptions;\n    _internals;\n    _merging;\n    _init;\n    constructor(input, options, defaults) {\n        assert.any([is.string, is.urlInstance, is.object, is.undefined], input);\n        assert.any([is.object, is.undefined], options);\n        assert.any([is.object, is.undefined], defaults);\n        if (input instanceof Options || options instanceof Options) {\n            throw new TypeError('The defaults must be passed as the third argument');\n        }\n        this._internals = cloneInternals(defaults?._internals ?? defaults ?? defaultInternals);\n        this._init = [...(defaults?._init ?? [])];\n        this._merging = false;\n        this._unixOptions = undefined;\n        // This rule allows `finally` to be considered more important.\n        // Meaning no matter the error thrown in the `try` block,\n        // if `finally` throws then the `finally` error will be thrown.\n        //\n        // Yes, we want this. If we set `url` first, then the `url.searchParams`\n        // would get merged. Instead we set the `searchParams` first, then\n        // `url.searchParams` is overwritten as expected.\n        //\n        /* eslint-disable no-unsafe-finally */\n        try {\n            if (is.plainObject(input)) {\n                try {\n                    this.merge(input);\n                    this.merge(options);\n                }\n                finally {\n                    this.url = input.url;\n                }\n            }\n            else {\n                try {\n                    this.merge(options);\n                }\n                finally {\n                    if (options?.url !== undefined) {\n                        if (input === undefined) {\n                            this.url = options.url;\n                        }\n                        else {\n                            throw new TypeError('The `url` option is mutually exclusive with the `input` argument');\n                        }\n                    }\n                    else if (input !== undefined) {\n                        this.url = input;\n                    }\n                }\n            }\n        }\n        catch (error) {\n            error.options = this;\n            throw error;\n        }\n        /* eslint-enable no-unsafe-finally */\n    }\n    merge(options) {\n        if (!options) {\n            return;\n        }\n        if (options instanceof Options) {\n            for (const init of options._init) {\n                this.merge(init);\n            }\n            return;\n        }\n        options = cloneRaw(options);\n        init(this, options, this);\n        init(options, options, this);\n        this._merging = true;\n        // Always merge `isStream` first\n        if ('isStream' in options) {\n            this.isStream = options.isStream;\n        }\n        try {\n            let push = false;\n            for (const key in options) {\n                // `got.extend()` options\n                if (key === 'mutableDefaults' || key === 'handlers') {\n                    continue;\n                }\n                // Never merge `url`\n                if (key === 'url') {\n                    continue;\n                }\n                if (!(key in this)) {\n                    throw new Error(`Unexpected option: ${key}`);\n                }\n                // @ts-expect-error Type 'unknown' is not assignable to type 'never'.\n                const value = options[key];\n                if (value === undefined) {\n                    continue;\n                }\n                // @ts-expect-error Type 'unknown' is not assignable to type 'never'.\n                this[key] = value;\n                push = true;\n            }\n            if (push) {\n                this._init.push(options);\n            }\n        }\n        finally {\n            this._merging = false;\n        }\n    }\n    /**\n    Custom request function.\n    The main purpose of this is to [support HTTP2 using a wrapper](https://github.com/szmarczak/http2-wrapper).\n\n    @default http.request | https.request\n    */\n    get request() {\n        return this._internals.request;\n    }\n    set request(value) {\n        assert.any([is.function, is.undefined], value);\n        this._internals.request = value;\n    }\n    /**\n    An object representing `http`, `https` and `http2` keys for [`http.Agent`](https://nodejs.org/api/http.html#http_class_http_agent), [`https.Agent`](https://nodejs.org/api/https.html#https_class_https_agent) and [`http2wrapper.Agent`](https://github.com/szmarczak/http2-wrapper#new-http2agentoptions) instance.\n    This is necessary because a request to one protocol might redirect to another.\n    In such a scenario, Got will switch over to the right protocol agent for you.\n\n    If a key is not present, it will default to a global agent.\n\n    @example\n    ```\n    import got from 'got';\n    import HttpAgent from 'agentkeepalive';\n\n    const {HttpsAgent} = HttpAgent;\n\n    await got('https://sindresorhus.com', {\n        agent: {\n            http: new HttpAgent(),\n            https: new HttpsAgent()\n        }\n    });\n    ```\n    */\n    get agent() {\n        return this._internals.agent;\n    }\n    set agent(value) {\n        assert.plainObject(value);\n        // eslint-disable-next-line guard-for-in\n        for (const key in value) {\n            if (!(key in this._internals.agent)) {\n                throw new TypeError(`Unexpected agent option: ${key}`);\n            }\n            // @ts-expect-error - No idea why `value[key]` doesn't work here.\n            assert.any([is.object, is.undefined], value[key]);\n        }\n        if (this._merging) {\n            Object.assign(this._internals.agent, value);\n        }\n        else {\n            this._internals.agent = { ...value };\n        }\n    }\n    get h2session() {\n        return this._internals.h2session;\n    }\n    set h2session(value) {\n        this._internals.h2session = value;\n    }\n    /**\n    Decompress the response automatically.\n\n    This will set the `accept-encoding` header to `gzip, deflate, br` unless you set it yourself.\n\n    If this is disabled, a compressed response is returned as a `Buffer`.\n    This may be useful if you want to handle decompression yourself or stream the raw compressed data.\n\n    @default true\n    */\n    get decompress() {\n        return this._internals.decompress;\n    }\n    set decompress(value) {\n        assert.boolean(value);\n        this._internals.decompress = value;\n    }\n    /**\n    Milliseconds to wait for the server to end the response before aborting the request with `got.TimeoutError` error (a.k.a. `request` property).\n    By default, there's no timeout.\n\n    This also accepts an `object` with the following fields to constrain the duration of each phase of the request lifecycle:\n\n    - `lookup` starts when a socket is assigned and ends when the hostname has been resolved.\n        Does not apply when using a Unix domain socket.\n    - `connect` starts when `lookup` completes (or when the socket is assigned if lookup does not apply to the request) and ends when the socket is connected.\n    - `secureConnect` starts when `connect` completes and ends when the handshaking process completes (HTTPS only).\n    - `socket` starts when the socket is connected. See [request.setTimeout](https://nodejs.org/api/http.html#http_request_settimeout_timeout_callback).\n    - `response` starts when the request has been written to the socket and ends when the response headers are received.\n    - `send` starts when the socket is connected and ends with the request has been written to the socket.\n    - `request` starts when the request is initiated and ends when the response's end event fires.\n    */\n    get timeout() {\n        // We always return `Delays` here.\n        // It has to be `Delays | number`, otherwise TypeScript will error because the getter and the setter have incompatible types.\n        return this._internals.timeout;\n    }\n    set timeout(value) {\n        assert.plainObject(value);\n        // eslint-disable-next-line guard-for-in\n        for (const key in value) {\n            if (!(key in this._internals.timeout)) {\n                throw new Error(`Unexpected timeout option: ${key}`);\n            }\n            // @ts-expect-error - No idea why `value[key]` doesn't work here.\n            assert.any([is.number, is.undefined], value[key]);\n        }\n        if (this._merging) {\n            Object.assign(this._internals.timeout, value);\n        }\n        else {\n            this._internals.timeout = { ...value };\n        }\n    }\n    /**\n    When specified, `prefixUrl` will be prepended to `url`.\n    The prefix can be any valid URL, either relative or absolute.\n    A trailing slash `/` is optional - one will be added automatically.\n\n    __Note__: `prefixUrl` will be ignored if the `url` argument is a URL instance.\n\n    __Note__: Leading slashes in `input` are disallowed when using this option to enforce consistency and avoid confusion.\n    For example, when the prefix URL is `https://example.com/foo` and the input is `/bar`, there's ambiguity whether the resulting URL would become `https://example.com/foo/bar` or `https://example.com/bar`.\n    The latter is used by browsers.\n\n    __Tip__: Useful when used with `got.extend()` to create niche-specific Got instances.\n\n    __Tip__: You can change `prefixUrl` using hooks as long as the URL still includes the `prefixUrl`.\n    If the URL doesn't include it anymore, it will throw.\n\n    @example\n    ```\n    import got from 'got';\n\n    await got('unicorn', {prefixUrl: 'https://cats.com'});\n    //=> 'https://cats.com/unicorn'\n\n    const instance = got.extend({\n        prefixUrl: 'https://google.com'\n    });\n\n    await instance('unicorn', {\n        hooks: {\n            beforeRequest: [\n                options => {\n                    options.prefixUrl = 'https://cats.com';\n                }\n            ]\n        }\n    });\n    //=> 'https://cats.com/unicorn'\n    ```\n    */\n    get prefixUrl() {\n        // We always return `string` here.\n        // It has to be `string | URL`, otherwise TypeScript will error because the getter and the setter have incompatible types.\n        return this._internals.prefixUrl;\n    }\n    set prefixUrl(value) {\n        assert.any([is.string, is.urlInstance], value);\n        if (value === '') {\n            this._internals.prefixUrl = '';\n            return;\n        }\n        value = value.toString();\n        if (!value.endsWith('/')) {\n            value += '/';\n        }\n        if (this._internals.prefixUrl && this._internals.url) {\n            const { href } = this._internals.url;\n            this._internals.url.href = value + href.slice(this._internals.prefixUrl.length);\n        }\n        this._internals.prefixUrl = value;\n    }\n    /**\n    __Note #1__: The `body` option cannot be used with the `json` or `form` option.\n\n    __Note #2__: If you provide this option, `got.stream()` will be read-only.\n\n    __Note #3__: If you provide a payload with the `GET` or `HEAD` method, it will throw a `TypeError` unless the method is `GET` and the `allowGetBody` option is set to `true`.\n\n    __Note #4__: This option is not enumerable and will not be merged with the instance defaults.\n\n    The `content-length` header will be automatically set if `body` is a `string` / `Buffer` / [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) / [`form-data` instance](https://github.com/form-data/form-data), and `content-length` and `transfer-encoding` are not manually set in `options.headers`.\n\n    Since Got 12, the `content-length` is not automatically set when `body` is a `fs.createReadStream`.\n    */\n    get body() {\n        return this._internals.body;\n    }\n    set body(value) {\n        assert.any([is.string, is.buffer, is.nodeStream, is.generator, is.asyncGenerator, isFormData, is.undefined], value);\n        if (is.nodeStream(value)) {\n            assert.truthy(value.readable);\n        }\n        if (value !== undefined) {\n            assert.undefined(this._internals.form);\n            assert.undefined(this._internals.json);\n        }\n        this._internals.body = value;\n    }\n    /**\n    The form body is converted to a query string using [`(new URLSearchParams(object)).toString()`](https://nodejs.org/api/url.html#url_constructor_new_urlsearchparams_obj).\n\n    If the `Content-Type` header is not present, it will be set to `application/x-www-form-urlencoded`.\n\n    __Note #1__: If you provide this option, `got.stream()` will be read-only.\n\n    __Note #2__: This option is not enumerable and will not be merged with the instance defaults.\n    */\n    get form() {\n        return this._internals.form;\n    }\n    set form(value) {\n        assert.any([is.plainObject, is.undefined], value);\n        if (value !== undefined) {\n            assert.undefined(this._internals.body);\n            assert.undefined(this._internals.json);\n        }\n        this._internals.form = value;\n    }\n    /**\n    JSON body. If the `Content-Type` header is not set, it will be set to `application/json`.\n\n    __Note #1__: If you provide this option, `got.stream()` will be read-only.\n\n    __Note #2__: This option is not enumerable and will not be merged with the instance defaults.\n    */\n    get json() {\n        return this._internals.json;\n    }\n    set json(value) {\n        if (value !== undefined) {\n            assert.undefined(this._internals.body);\n            assert.undefined(this._internals.form);\n        }\n        this._internals.json = value;\n    }\n    /**\n    The URL to request, as a string, a [`https.request` options object](https://nodejs.org/api/https.html#https_https_request_options_callback), or a [WHATWG `URL`](https://nodejs.org/api/url.html#url_class_url).\n\n    Properties from `options` will override properties in the parsed `url`.\n\n    If no protocol is specified, it will throw a `TypeError`.\n\n    __Note__: The query string is **not** parsed as search params.\n\n    @example\n    ```\n    await got('https://example.com/?query=a b'); //=> https://example.com/?query=a%20b\n    await got('https://example.com/', {searchParams: {query: 'a b'}}); //=> https://example.com/?query=a+b\n\n    // The query string is overridden by `searchParams`\n    await got('https://example.com/?query=a b', {searchParams: {query: 'a b'}}); //=> https://example.com/?query=a+b\n    ```\n    */\n    get url() {\n        return this._internals.url;\n    }\n    set url(value) {\n        assert.any([is.string, is.urlInstance, is.undefined], value);\n        if (value === undefined) {\n            this._internals.url = undefined;\n            return;\n        }\n        if (is.string(value) && value.startsWith('/')) {\n            throw new Error('`url` must not start with a slash');\n        }\n        const urlString = `${this.prefixUrl}${value.toString()}`;\n        const url = new URL(urlString);\n        this._internals.url = url;\n        if (url.protocol === 'unix:') {\n            url.href = `http://unix${url.pathname}${url.search}`;\n        }\n        if (url.protocol !== 'http:' && url.protocol !== 'https:') {\n            const error = new Error(`Unsupported protocol: ${url.protocol}`);\n            error.code = 'ERR_UNSUPPORTED_PROTOCOL';\n            throw error;\n        }\n        if (this._internals.username) {\n            url.username = this._internals.username;\n            this._internals.username = '';\n        }\n        if (this._internals.password) {\n            url.password = this._internals.password;\n            this._internals.password = '';\n        }\n        if (this._internals.searchParams) {\n            url.search = this._internals.searchParams.toString();\n            this._internals.searchParams = undefined;\n        }\n        if (url.hostname === 'unix') {\n            if (!this._internals.enableUnixSockets) {\n                throw new Error('Using UNIX domain sockets but option `enableUnixSockets` is not enabled');\n            }\n            const matches = /(?<socketPath>.+?):(?<path>.+)/.exec(`${url.pathname}${url.search}`);\n            if (matches?.groups) {\n                const { socketPath, path } = matches.groups;\n                this._unixOptions = {\n                    socketPath,\n                    path,\n                    host: '',\n                };\n            }\n            else {\n                this._unixOptions = undefined;\n            }\n            return;\n        }\n        this._unixOptions = undefined;\n    }\n    /**\n    Cookie support. You don't have to care about parsing or how to store them.\n\n    __Note__: If you provide this option, `options.headers.cookie` will be overridden.\n    */\n    get cookieJar() {\n        return this._internals.cookieJar;\n    }\n    set cookieJar(value) {\n        assert.any([is.object, is.undefined], value);\n        if (value === undefined) {\n            this._internals.cookieJar = undefined;\n            return;\n        }\n        let { setCookie, getCookieString } = value;\n        assert.function(setCookie);\n        assert.function(getCookieString);\n        /* istanbul ignore next: Horrible `tough-cookie` v3 check */\n        if (setCookie.length === 4 && getCookieString.length === 0) {\n            setCookie = promisify(setCookie.bind(value));\n            getCookieString = promisify(getCookieString.bind(value));\n            this._internals.cookieJar = {\n                setCookie,\n                getCookieString: getCookieString,\n            };\n        }\n        else {\n            this._internals.cookieJar = value;\n        }\n    }\n    /**\n    You can abort the `request` using [`AbortController`](https://developer.mozilla.org/en-US/docs/Web/API/AbortController).\n\n    @example\n    ```\n    import got from 'got';\n\n    const abortController = new AbortController();\n\n    const request = got('https://httpbin.org/anything', {\n        signal: abortController.signal\n    });\n\n    setTimeout(() => {\n        abortController.abort();\n    }, 100);\n    ```\n    */\n    get signal() {\n        return this._internals.signal;\n    }\n    set signal(value) {\n        assert.object(value);\n        this._internals.signal = value;\n    }\n    /**\n    Ignore invalid cookies instead of throwing an error.\n    Only useful when the `cookieJar` option has been set. Not recommended.\n\n    @default false\n    */\n    get ignoreInvalidCookies() {\n        return this._internals.ignoreInvalidCookies;\n    }\n    set ignoreInvalidCookies(value) {\n        assert.boolean(value);\n        this._internals.ignoreInvalidCookies = value;\n    }\n    /**\n    Query string that will be added to the request URL.\n    This will override the query string in `url`.\n\n    If you need to pass in an array, you can do it using a `URLSearchParams` instance.\n\n    @example\n    ```\n    import got from 'got';\n\n    const searchParams = new URLSearchParams([['key', 'a'], ['key', 'b']]);\n\n    await got('https://example.com', {searchParams});\n\n    console.log(searchParams.toString());\n    //=> 'key=a&key=b'\n    ```\n    */\n    get searchParams() {\n        if (this._internals.url) {\n            return this._internals.url.searchParams;\n        }\n        if (this._internals.searchParams === undefined) {\n            this._internals.searchParams = new URLSearchParams();\n        }\n        return this._internals.searchParams;\n    }\n    set searchParams(value) {\n        assert.any([is.string, is.object, is.undefined], value);\n        const url = this._internals.url;\n        if (value === undefined) {\n            this._internals.searchParams = undefined;\n            if (url) {\n                url.search = '';\n            }\n            return;\n        }\n        const searchParameters = this.searchParams;\n        let updated;\n        if (is.string(value)) {\n            updated = new URLSearchParams(value);\n        }\n        else if (value instanceof URLSearchParams) {\n            updated = value;\n        }\n        else {\n            validateSearchParameters(value);\n            updated = new URLSearchParams();\n            // eslint-disable-next-line guard-for-in\n            for (const key in value) {\n                const entry = value[key];\n                if (entry === null) {\n                    updated.append(key, '');\n                }\n                else if (entry === undefined) {\n                    searchParameters.delete(key);\n                }\n                else {\n                    updated.append(key, entry);\n                }\n            }\n        }\n        if (this._merging) {\n            // These keys will be replaced\n            for (const key of updated.keys()) {\n                searchParameters.delete(key);\n            }\n            for (const [key, value] of updated) {\n                searchParameters.append(key, value);\n            }\n        }\n        else if (url) {\n            url.search = searchParameters.toString();\n        }\n        else {\n            this._internals.searchParams = searchParameters;\n        }\n    }\n    get searchParameters() {\n        throw new Error('The `searchParameters` option does not exist. Use `searchParams` instead.');\n    }\n    set searchParameters(_value) {\n        throw new Error('The `searchParameters` option does not exist. Use `searchParams` instead.');\n    }\n    get dnsLookup() {\n        return this._internals.dnsLookup;\n    }\n    set dnsLookup(value) {\n        assert.any([is.function, is.undefined], value);\n        this._internals.dnsLookup = value;\n    }\n    /**\n    An instance of [`CacheableLookup`](https://github.com/szmarczak/cacheable-lookup) used for making DNS lookups.\n    Useful when making lots of requests to different *public* hostnames.\n\n    `CacheableLookup` uses `dns.resolver4(..)` and `dns.resolver6(...)` under the hood and fall backs to `dns.lookup(...)` when the first two fail, which may lead to additional delay.\n\n    __Note__: This should stay disabled when making requests to internal hostnames such as `localhost`, `database.local` etc.\n\n    @default false\n    */\n    get dnsCache() {\n        return this._internals.dnsCache;\n    }\n    set dnsCache(value) {\n        assert.any([is.object, is.boolean, is.undefined], value);\n        if (value === true) {\n            this._internals.dnsCache = getGlobalDnsCache();\n        }\n        else if (value === false) {\n            this._internals.dnsCache = undefined;\n        }\n        else {\n            this._internals.dnsCache = value;\n        }\n    }\n    /**\n    User data. `context` is shallow merged and enumerable. If it contains non-enumerable properties they will NOT be merged.\n\n    @example\n    ```\n    import got from 'got';\n\n    const instance = got.extend({\n        hooks: {\n            beforeRequest: [\n                options => {\n                    if (!options.context || !options.context.token) {\n                        throw new Error('Token required');\n                    }\n\n                    options.headers.token = options.context.token;\n                }\n            ]\n        }\n    });\n\n    const context = {\n        token: 'secret'\n    };\n\n    const response = await instance('https://httpbin.org/headers', {context});\n\n    // Let's see the headers\n    console.log(response.body);\n    ```\n    */\n    get context() {\n        return this._internals.context;\n    }\n    set context(value) {\n        assert.object(value);\n        if (this._merging) {\n            Object.assign(this._internals.context, value);\n        }\n        else {\n            this._internals.context = { ...value };\n        }\n    }\n    /**\n    Hooks allow modifications during the request lifecycle.\n    Hook functions may be async and are run serially.\n    */\n    get hooks() {\n        return this._internals.hooks;\n    }\n    set hooks(value) {\n        assert.object(value);\n        // eslint-disable-next-line guard-for-in\n        for (const knownHookEvent in value) {\n            if (!(knownHookEvent in this._internals.hooks)) {\n                throw new Error(`Unexpected hook event: ${knownHookEvent}`);\n            }\n            const typedKnownHookEvent = knownHookEvent;\n            const hooks = value[typedKnownHookEvent];\n            assert.any([is.array, is.undefined], hooks);\n            if (hooks) {\n                for (const hook of hooks) {\n                    assert.function(hook);\n                }\n            }\n            if (this._merging) {\n                if (hooks) {\n                    // @ts-expect-error FIXME\n                    this._internals.hooks[typedKnownHookEvent].push(...hooks);\n                }\n            }\n            else {\n                if (!hooks) {\n                    throw new Error(`Missing hook event: ${knownHookEvent}`);\n                }\n                // @ts-expect-error FIXME\n                this._internals.hooks[knownHookEvent] = [...hooks];\n            }\n        }\n    }\n    /**\n    Whether redirect responses should be followed automatically.\n\n    Optionally, pass a function to dynamically decide based on the response object.\n\n    Note that if a `303` is sent by the server in response to any request type (`POST`, `DELETE`, etc.), Got will automatically request the resource pointed to in the location header via `GET`.\n    This is in accordance with [the spec](https://tools.ietf.org/html/rfc7231#section-6.4.4). You can optionally turn on this behavior also for other redirect codes - see `methodRewriting`.\n\n    @default true\n    */\n    get followRedirect() {\n        return this._internals.followRedirect;\n    }\n    set followRedirect(value) {\n        assert.any([is.boolean, is.function], value);\n        this._internals.followRedirect = value;\n    }\n    get followRedirects() {\n        throw new TypeError('The `followRedirects` option does not exist. Use `followRedirect` instead.');\n    }\n    set followRedirects(_value) {\n        throw new TypeError('The `followRedirects` option does not exist. Use `followRedirect` instead.');\n    }\n    /**\n    If exceeded, the request will be aborted and a `MaxRedirectsError` will be thrown.\n\n    @default 10\n    */\n    get maxRedirects() {\n        return this._internals.maxRedirects;\n    }\n    set maxRedirects(value) {\n        assert.number(value);\n        this._internals.maxRedirects = value;\n    }\n    /**\n    A cache adapter instance for storing cached response data.\n\n    @default false\n    */\n    get cache() {\n        return this._internals.cache;\n    }\n    set cache(value) {\n        assert.any([is.object, is.string, is.boolean, is.undefined], value);\n        if (value === true) {\n            this._internals.cache = globalCache;\n        }\n        else if (value === false) {\n            this._internals.cache = undefined;\n        }\n        else {\n            this._internals.cache = value;\n        }\n    }\n    /**\n    Determines if a `got.HTTPError` is thrown for unsuccessful responses.\n\n    If this is disabled, requests that encounter an error status code will be resolved with the `response` instead of throwing.\n    This may be useful if you are checking for resource availability and are expecting error responses.\n\n    @default true\n    */\n    get throwHttpErrors() {\n        return this._internals.throwHttpErrors;\n    }\n    set throwHttpErrors(value) {\n        assert.boolean(value);\n        this._internals.throwHttpErrors = value;\n    }\n    get username() {\n        const url = this._internals.url;\n        const value = url ? url.username : this._internals.username;\n        return decodeURIComponent(value);\n    }\n    set username(value) {\n        assert.string(value);\n        const url = this._internals.url;\n        const fixedValue = encodeURIComponent(value);\n        if (url) {\n            url.username = fixedValue;\n        }\n        else {\n            this._internals.username = fixedValue;\n        }\n    }\n    get password() {\n        const url = this._internals.url;\n        const value = url ? url.password : this._internals.password;\n        return decodeURIComponent(value);\n    }\n    set password(value) {\n        assert.string(value);\n        const url = this._internals.url;\n        const fixedValue = encodeURIComponent(value);\n        if (url) {\n            url.password = fixedValue;\n        }\n        else {\n            this._internals.password = fixedValue;\n        }\n    }\n    /**\n    If set to `true`, Got will additionally accept HTTP2 requests.\n\n    It will choose either HTTP/1.1 or HTTP/2 depending on the ALPN protocol.\n\n    __Note__: This option requires Node.js 15.10.0 or newer as HTTP/2 support on older Node.js versions is very buggy.\n\n    __Note__: Overriding `options.request` will disable HTTP2 support.\n\n    @default false\n\n    @example\n    ```\n    import got from 'got';\n\n    const {headers} = await got('https://nghttp2.org/httpbin/anything', {http2: true});\n\n    console.log(headers.via);\n    //=> '2 nghttpx'\n    ```\n    */\n    get http2() {\n        return this._internals.http2;\n    }\n    set http2(value) {\n        assert.boolean(value);\n        this._internals.http2 = value;\n    }\n    /**\n    Set this to `true` to allow sending body for the `GET` method.\n    However, the [HTTP/2 specification](https://tools.ietf.org/html/rfc7540#section-8.1.3) says that `An HTTP GET request includes request header fields and no payload body`, therefore when using the HTTP/2 protocol this option will have no effect.\n    This option is only meant to interact with non-compliant servers when you have no other choice.\n\n    __Note__: The [RFC 7231](https://tools.ietf.org/html/rfc7231#section-4.3.1) doesn't specify any particular behavior for the GET method having a payload, therefore __it's considered an [anti-pattern](https://en.wikipedia.org/wiki/Anti-pattern)__.\n\n    @default false\n    */\n    get allowGetBody() {\n        return this._internals.allowGetBody;\n    }\n    set allowGetBody(value) {\n        assert.boolean(value);\n        this._internals.allowGetBody = value;\n    }\n    /**\n    Request headers.\n\n    Existing headers will be overwritten. Headers set to `undefined` will be omitted.\n\n    @default {}\n    */\n    get headers() {\n        return this._internals.headers;\n    }\n    set headers(value) {\n        assert.plainObject(value);\n        if (this._merging) {\n            Object.assign(this._internals.headers, lowercaseKeys(value));\n        }\n        else {\n            this._internals.headers = lowercaseKeys(value);\n        }\n    }\n    /**\n    Specifies if the HTTP request method should be [rewritten as `GET`](https://tools.ietf.org/html/rfc7231#section-6.4) on redirects.\n\n    As the [specification](https://tools.ietf.org/html/rfc7231#section-6.4) prefers to rewrite the HTTP method only on `303` responses, this is Got's default behavior.\n    Setting `methodRewriting` to `true` will also rewrite `301` and `302` responses, as allowed by the spec. This is the behavior followed by `curl` and browsers.\n\n    __Note__: Got never performs method rewriting on `307` and `308` responses, as this is [explicitly prohibited by the specification](https://www.rfc-editor.org/rfc/rfc7231#section-6.4.7).\n\n    @default false\n    */\n    get methodRewriting() {\n        return this._internals.methodRewriting;\n    }\n    set methodRewriting(value) {\n        assert.boolean(value);\n        this._internals.methodRewriting = value;\n    }\n    /**\n    Indicates which DNS record family to use.\n\n    Values:\n    - `undefined`: IPv4 (if present) or IPv6\n    - `4`: Only IPv4\n    - `6`: Only IPv6\n\n    @default undefined\n    */\n    get dnsLookupIpVersion() {\n        return this._internals.dnsLookupIpVersion;\n    }\n    set dnsLookupIpVersion(value) {\n        if (value !== undefined && value !== 4 && value !== 6) {\n            throw new TypeError(`Invalid DNS lookup IP version: ${value}`);\n        }\n        this._internals.dnsLookupIpVersion = value;\n    }\n    /**\n    A function used to parse JSON responses.\n\n    @example\n    ```\n    import got from 'got';\n    import Bourne from '@hapi/bourne';\n\n    const parsed = await got('https://example.com', {\n        parseJson: text => Bourne.parse(text)\n    }).json();\n\n    console.log(parsed);\n    ```\n    */\n    get parseJson() {\n        return this._internals.parseJson;\n    }\n    set parseJson(value) {\n        assert.function(value);\n        this._internals.parseJson = value;\n    }\n    /**\n    A function used to stringify the body of JSON requests.\n\n    @example\n    ```\n    import got from 'got';\n\n    await got.post('https://example.com', {\n        stringifyJson: object => JSON.stringify(object, (key, value) => {\n            if (key.startsWith('_')) {\n                return;\n            }\n\n            return value;\n        }),\n        json: {\n            some: 'payload',\n            _ignoreMe: 1234\n        }\n    });\n    ```\n\n    @example\n    ```\n    import got from 'got';\n\n    await got.post('https://example.com', {\n        stringifyJson: object => JSON.stringify(object, (key, value) => {\n            if (typeof value === 'number') {\n                return value.toString();\n            }\n\n            return value;\n        }),\n        json: {\n            some: 'payload',\n            number: 1\n        }\n    });\n    ```\n    */\n    get stringifyJson() {\n        return this._internals.stringifyJson;\n    }\n    set stringifyJson(value) {\n        assert.function(value);\n        this._internals.stringifyJson = value;\n    }\n    /**\n    An object representing `limit`, `calculateDelay`, `methods`, `statusCodes`, `maxRetryAfter` and `errorCodes` fields for maximum retry count, retry handler, allowed methods, allowed status codes, maximum [`Retry-After`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After) time and allowed error codes.\n\n    Delays between retries counts with function `1000 * Math.pow(2, retry) + Math.random() * 100`, where `retry` is attempt number (starts from 1).\n\n    The `calculateDelay` property is a `function` that receives an object with `attemptCount`, `retryOptions`, `error` and `computedValue` properties for current retry count, the retry options, error and default computed value.\n    The function must return a delay in milliseconds (or a Promise resolving with it) (`0` return value cancels retry).\n\n    By default, it retries *only* on the specified methods, status codes, and on these network errors:\n\n    - `ETIMEDOUT`: One of the [timeout](#timeout) limits were reached.\n    - `ECONNRESET`: Connection was forcibly closed by a peer.\n    - `EADDRINUSE`: Could not bind to any free port.\n    - `ECONNREFUSED`: Connection was refused by the server.\n    - `EPIPE`: The remote side of the stream being written has been closed.\n    - `ENOTFOUND`: Couldn't resolve the hostname to an IP address.\n    - `ENETUNREACH`: No internet connection.\n    - `EAI_AGAIN`: DNS lookup timed out.\n\n    __Note__: If `maxRetryAfter` is set to `undefined`, it will use `options.timeout`.\n    __Note__: If [`Retry-After`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After) header is greater than `maxRetryAfter`, it will cancel the request.\n    */\n    get retry() {\n        return this._internals.retry;\n    }\n    set retry(value) {\n        assert.plainObject(value);\n        assert.any([is.function, is.undefined], value.calculateDelay);\n        assert.any([is.number, is.undefined], value.maxRetryAfter);\n        assert.any([is.number, is.undefined], value.limit);\n        assert.any([is.array, is.undefined], value.methods);\n        assert.any([is.array, is.undefined], value.statusCodes);\n        assert.any([is.array, is.undefined], value.errorCodes);\n        assert.any([is.number, is.undefined], value.noise);\n        if (value.noise && Math.abs(value.noise) > 100) {\n            throw new Error(`The maximum acceptable retry noise is +/- 100ms, got ${value.noise}`);\n        }\n        for (const key in value) {\n            if (!(key in this._internals.retry)) {\n                throw new Error(`Unexpected retry option: ${key}`);\n            }\n        }\n        if (this._merging) {\n            Object.assign(this._internals.retry, value);\n        }\n        else {\n            this._internals.retry = { ...value };\n        }\n        const { retry } = this._internals;\n        retry.methods = [...new Set(retry.methods.map(method => method.toUpperCase()))];\n        retry.statusCodes = [...new Set(retry.statusCodes)];\n        retry.errorCodes = [...new Set(retry.errorCodes)];\n    }\n    /**\n    From `http.RequestOptions`.\n\n    The IP address used to send the request from.\n    */\n    get localAddress() {\n        return this._internals.localAddress;\n    }\n    set localAddress(value) {\n        assert.any([is.string, is.undefined], value);\n        this._internals.localAddress = value;\n    }\n    /**\n    The HTTP method used to make the request.\n\n    @default 'GET'\n    */\n    get method() {\n        return this._internals.method;\n    }\n    set method(value) {\n        assert.string(value);\n        this._internals.method = value.toUpperCase();\n    }\n    get createConnection() {\n        return this._internals.createConnection;\n    }\n    set createConnection(value) {\n        assert.any([is.function, is.undefined], value);\n        this._internals.createConnection = value;\n    }\n    /**\n    From `http-cache-semantics`\n\n    @default {}\n    */\n    get cacheOptions() {\n        return this._internals.cacheOptions;\n    }\n    set cacheOptions(value) {\n        assert.plainObject(value);\n        assert.any([is.boolean, is.undefined], value.shared);\n        assert.any([is.number, is.undefined], value.cacheHeuristic);\n        assert.any([is.number, is.undefined], value.immutableMinTimeToLive);\n        assert.any([is.boolean, is.undefined], value.ignoreCargoCult);\n        for (const key in value) {\n            if (!(key in this._internals.cacheOptions)) {\n                throw new Error(`Cache option \\`${key}\\` does not exist`);\n            }\n        }\n        if (this._merging) {\n            Object.assign(this._internals.cacheOptions, value);\n        }\n        else {\n            this._internals.cacheOptions = { ...value };\n        }\n    }\n    /**\n    Options for the advanced HTTPS API.\n    */\n    get https() {\n        return this._internals.https;\n    }\n    set https(value) {\n        assert.plainObject(value);\n        assert.any([is.boolean, is.undefined], value.rejectUnauthorized);\n        assert.any([is.function, is.undefined], value.checkServerIdentity);\n        assert.any([is.string, is.object, is.array, is.undefined], value.certificateAuthority);\n        assert.any([is.string, is.object, is.array, is.undefined], value.key);\n        assert.any([is.string, is.object, is.array, is.undefined], value.certificate);\n        assert.any([is.string, is.undefined], value.passphrase);\n        assert.any([is.string, is.buffer, is.array, is.undefined], value.pfx);\n        assert.any([is.array, is.undefined], value.alpnProtocols);\n        assert.any([is.string, is.undefined], value.ciphers);\n        assert.any([is.string, is.buffer, is.undefined], value.dhparam);\n        assert.any([is.string, is.undefined], value.signatureAlgorithms);\n        assert.any([is.string, is.undefined], value.minVersion);\n        assert.any([is.string, is.undefined], value.maxVersion);\n        assert.any([is.boolean, is.undefined], value.honorCipherOrder);\n        assert.any([is.number, is.undefined], value.tlsSessionLifetime);\n        assert.any([is.string, is.undefined], value.ecdhCurve);\n        assert.any([is.string, is.buffer, is.array, is.undefined], value.certificateRevocationLists);\n        for (const key in value) {\n            if (!(key in this._internals.https)) {\n                throw new Error(`HTTPS option \\`${key}\\` does not exist`);\n            }\n        }\n        if (this._merging) {\n            Object.assign(this._internals.https, value);\n        }\n        else {\n            this._internals.https = { ...value };\n        }\n    }\n    /**\n    [Encoding](https://nodejs.org/api/buffer.html#buffer_buffers_and_character_encodings) to be used on `setEncoding` of the response data.\n\n    To get a [`Buffer`](https://nodejs.org/api/buffer.html), you need to set `responseType` to `buffer` instead.\n    Don't set this option to `null`.\n\n    __Note__: This doesn't affect streams! Instead, you need to do `got.stream(...).setEncoding(encoding)`.\n\n    @default 'utf-8'\n    */\n    get encoding() {\n        return this._internals.encoding;\n    }\n    set encoding(value) {\n        if (value === null) {\n            throw new TypeError('To get a Buffer, set `options.responseType` to `buffer` instead');\n        }\n        assert.any([is.string, is.undefined], value);\n        this._internals.encoding = value;\n    }\n    /**\n    When set to `true` the promise will return the Response body instead of the Response object.\n\n    @default false\n    */\n    get resolveBodyOnly() {\n        return this._internals.resolveBodyOnly;\n    }\n    set resolveBodyOnly(value) {\n        assert.boolean(value);\n        this._internals.resolveBodyOnly = value;\n    }\n    /**\n    Returns a `Stream` instead of a `Promise`.\n    This is equivalent to calling `got.stream(url, options?)`.\n\n    @default false\n    */\n    get isStream() {\n        return this._internals.isStream;\n    }\n    set isStream(value) {\n        assert.boolean(value);\n        this._internals.isStream = value;\n    }\n    /**\n    The parsing method.\n\n    The promise also has `.text()`, `.json()` and `.buffer()` methods which return another Got promise for the parsed body.\n\n    It's like setting the options to `{responseType: 'json', resolveBodyOnly: true}` but without affecting the main Got promise.\n\n    __Note__: When using streams, this option is ignored.\n\n    @example\n    ```\n    const responsePromise = got(url);\n    const bufferPromise = responsePromise.buffer();\n    const jsonPromise = responsePromise.json();\n\n    const [response, buffer, json] = Promise.all([responsePromise, bufferPromise, jsonPromise]);\n    // `response` is an instance of Got Response\n    // `buffer` is an instance of Buffer\n    // `json` is an object\n    ```\n\n    @example\n    ```\n    // This\n    const body = await got(url).json();\n\n    // is semantically the same as this\n    const body = await got(url, {responseType: 'json', resolveBodyOnly: true});\n    ```\n    */\n    get responseType() {\n        return this._internals.responseType;\n    }\n    set responseType(value) {\n        if (value === undefined) {\n            this._internals.responseType = 'text';\n            return;\n        }\n        if (value !== 'text' && value !== 'buffer' && value !== 'json') {\n            throw new Error(`Invalid \\`responseType\\` option: ${value}`);\n        }\n        this._internals.responseType = value;\n    }\n    get pagination() {\n        return this._internals.pagination;\n    }\n    set pagination(value) {\n        assert.object(value);\n        if (this._merging) {\n            Object.assign(this._internals.pagination, value);\n        }\n        else {\n            this._internals.pagination = value;\n        }\n    }\n    get auth() {\n        throw new Error('Parameter `auth` is deprecated. Use `username` / `password` instead.');\n    }\n    set auth(_value) {\n        throw new Error('Parameter `auth` is deprecated. Use `username` / `password` instead.');\n    }\n    get setHost() {\n        return this._internals.setHost;\n    }\n    set setHost(value) {\n        assert.boolean(value);\n        this._internals.setHost = value;\n    }\n    get maxHeaderSize() {\n        return this._internals.maxHeaderSize;\n    }\n    set maxHeaderSize(value) {\n        assert.any([is.number, is.undefined], value);\n        this._internals.maxHeaderSize = value;\n    }\n    get enableUnixSockets() {\n        return this._internals.enableUnixSockets;\n    }\n    set enableUnixSockets(value) {\n        assert.boolean(value);\n        this._internals.enableUnixSockets = value;\n    }\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    toJSON() {\n        return { ...this._internals };\n    }\n    [Symbol.for('nodejs.util.inspect.custom')](_depth, options) {\n        return inspect(this._internals, options);\n    }\n    createNativeRequestOptions() {\n        const internals = this._internals;\n        const url = internals.url;\n        let agent;\n        if (url.protocol === 'https:') {\n            agent = internals.http2 ? internals.agent : internals.agent.https;\n        }\n        else {\n            agent = internals.agent.http;\n        }\n        const { https } = internals;\n        let { pfx } = https;\n        if (is.array(pfx) && is.plainObject(pfx[0])) {\n            pfx = pfx.map(object => ({\n                buf: object.buffer,\n                passphrase: object.passphrase,\n            }));\n        }\n        return {\n            ...internals.cacheOptions,\n            ...this._unixOptions,\n            // HTTPS options\n            // eslint-disable-next-line @typescript-eslint/naming-convention\n            ALPNProtocols: https.alpnProtocols,\n            ca: https.certificateAuthority,\n            cert: https.certificate,\n            key: https.key,\n            passphrase: https.passphrase,\n            pfx: https.pfx,\n            rejectUnauthorized: https.rejectUnauthorized,\n            checkServerIdentity: https.checkServerIdentity ?? checkServerIdentity,\n            ciphers: https.ciphers,\n            honorCipherOrder: https.honorCipherOrder,\n            minVersion: https.minVersion,\n            maxVersion: https.maxVersion,\n            sigalgs: https.signatureAlgorithms,\n            sessionTimeout: https.tlsSessionLifetime,\n            dhparam: https.dhparam,\n            ecdhCurve: https.ecdhCurve,\n            crl: https.certificateRevocationLists,\n            // HTTP options\n            lookup: internals.dnsLookup ?? internals.dnsCache?.lookup,\n            family: internals.dnsLookupIpVersion,\n            agent,\n            setHost: internals.setHost,\n            method: internals.method,\n            maxHeaderSize: internals.maxHeaderSize,\n            localAddress: internals.localAddress,\n            headers: internals.headers,\n            createConnection: internals.createConnection,\n            timeout: internals.http2 ? getHttp2TimeoutOption(internals) : undefined,\n            // HTTP/2 options\n            h2session: internals.h2session,\n        };\n    }\n    getRequestFunction() {\n        const url = this._internals.url;\n        const { request } = this._internals;\n        if (!request && url) {\n            return this.getFallbackRequestFunction();\n        }\n        return request;\n    }\n    getFallbackRequestFunction() {\n        const url = this._internals.url;\n        if (!url) {\n            return;\n        }\n        if (url.protocol === 'https:') {\n            if (this._internals.http2) {\n                if (major < 15 || (major === 15 && minor < 10)) {\n                    const error = new Error('To use the `http2` option, install Node.js 15.10.0 or above');\n                    error.code = 'EUNSUPPORTED';\n                    throw error;\n                }\n                return http2wrapper.auto;\n            }\n            return https.request;\n        }\n        return http.request;\n    }\n    freeze() {\n        const options = this._internals;\n        Object.freeze(options);\n        Object.freeze(options.hooks);\n        Object.freeze(options.hooks.afterResponse);\n        Object.freeze(options.hooks.beforeError);\n        Object.freeze(options.hooks.beforeRedirect);\n        Object.freeze(options.hooks.beforeRequest);\n        Object.freeze(options.hooks.beforeRetry);\n        Object.freeze(options.hooks.init);\n        Object.freeze(options.https);\n        Object.freeze(options.cacheOptions);\n        Object.freeze(options.agent);\n        Object.freeze(options.headers);\n        Object.freeze(options.timeout);\n        Object.freeze(options.retry);\n        Object.freeze(options.retry.errorCodes);\n        Object.freeze(options.retry.methods);\n        Object.freeze(options.retry.statusCodes);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}