{"ast":null,"code":"'use strict';\n\n// See https://github.com/facebook/jest/issues/2549\n// eslint-disable-next-line node/prefer-global/url\nvar _objectSpread = require(\"C:/Users/sakas/OneDrive/Desktop/gogo/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nconst {\n  URL,\n  urlToHttpOptions\n} = require('url');\nconst http2 = require('http2');\nconst {\n  Writable\n} = require('stream');\nconst {\n  Agent,\n  globalAgent\n} = require('./agent.js');\nconst IncomingMessage = require('./incoming-message.js');\nconst proxyEvents = require('./utils/proxy-events.js');\nconst {\n  ERR_INVALID_ARG_TYPE,\n  ERR_INVALID_PROTOCOL,\n  ERR_HTTP_HEADERS_SENT\n} = require('./utils/errors.js');\nconst validateHeaderName = require('./utils/validate-header-name.js');\nconst validateHeaderValue = require('./utils/validate-header-value.js');\nconst proxySocketHandler = require('./utils/proxy-socket-handler.js');\nconst {\n  HTTP2_HEADER_STATUS,\n  HTTP2_HEADER_METHOD,\n  HTTP2_HEADER_PATH,\n  HTTP2_HEADER_AUTHORITY,\n  HTTP2_METHOD_CONNECT\n} = http2.constants;\nconst kHeaders = Symbol('headers');\nconst kOrigin = Symbol('origin');\nconst kSession = Symbol('session');\nconst kOptions = Symbol('options');\nconst kFlushedHeaders = Symbol('flushedHeaders');\nconst kJobs = Symbol('jobs');\nconst kPendingAgentPromise = Symbol('pendingAgentPromise');\nclass ClientRequest extends Writable {\n  constructor(input, options, callback) {\n    var _this;\n    super({\n      autoDestroy: false,\n      emitClose: false\n    });\n    _this = this;\n    if (typeof input === 'string') {\n      input = urlToHttpOptions(new URL(input));\n    } else if (input instanceof URL) {\n      input = urlToHttpOptions(input);\n    } else {\n      input = _objectSpread({}, input);\n    }\n    if (typeof options === 'function' || options === undefined) {\n      // (options, callback)\n      callback = options;\n      options = input;\n    } else {\n      // (input, options, callback)\n      options = Object.assign(input, options);\n    }\n    if (options.h2session) {\n      this[kSession] = options.h2session;\n      if (this[kSession].destroyed) {\n        throw new Error('The session has been closed already');\n      }\n      this.protocol = this[kSession].socket.encrypted ? 'https:' : 'http:';\n    } else if (options.agent === false) {\n      this.agent = new Agent({\n        maxEmptySessions: 0\n      });\n    } else if (typeof options.agent === 'undefined' || options.agent === null) {\n      this.agent = globalAgent;\n    } else if (typeof options.agent.request === 'function') {\n      this.agent = options.agent;\n    } else {\n      throw new ERR_INVALID_ARG_TYPE('options.agent', ['http2wrapper.Agent-like Object', 'undefined', 'false'], options.agent);\n    }\n    if (this.agent) {\n      this.protocol = this.agent.protocol;\n    }\n    if (options.protocol && options.protocol !== this.protocol) {\n      throw new ERR_INVALID_PROTOCOL(options.protocol, this.protocol);\n    }\n    if (!options.port) {\n      options.port = options.defaultPort || this.agent && this.agent.defaultPort || 443;\n    }\n    options.host = options.hostname || options.host || 'localhost';\n\n    // Unused\n    delete options.hostname;\n    const {\n      timeout\n    } = options;\n    options.timeout = undefined;\n    this[kHeaders] = Object.create(null);\n    this[kJobs] = [];\n    this[kPendingAgentPromise] = undefined;\n    this.socket = null;\n    this.connection = null;\n    this.method = options.method || 'GET';\n    if (!(this.method === 'CONNECT' && (options.path === '/' || options.path === undefined))) {\n      this.path = options.path;\n    }\n    this.res = null;\n    this.aborted = false;\n    this.reusedSocket = false;\n    const {\n      headers\n    } = options;\n    if (headers) {\n      // eslint-disable-next-line guard-for-in\n      for (const header in headers) {\n        this.setHeader(header, headers[header]);\n      }\n    }\n    if (options.auth && !('authorization' in this[kHeaders])) {\n      this[kHeaders].authorization = 'Basic ' + Buffer.from(options.auth).toString('base64');\n    }\n    options.session = options.tlsSession;\n    options.path = options.socketPath;\n    this[kOptions] = options;\n\n    // Clients that generate HTTP/2 requests directly SHOULD use the :authority pseudo-header field instead of the Host header field.\n    this[kOrigin] = new URL(\"\".concat(this.protocol, \"//\").concat(options.servername || options.host, \":\").concat(options.port));\n\n    // A socket is being reused\n    const reuseSocket = options._reuseSocket;\n    if (reuseSocket) {\n      options.createConnection = function () {\n        if (reuseSocket.destroyed) {\n          return _this.agent.createConnection(...arguments);\n        }\n        return reuseSocket;\n      };\n\n      // eslint-disable-next-line promise/prefer-await-to-then\n      this.agent.getSession(this[kOrigin], this[kOptions]).catch(() => {});\n    }\n    if (timeout) {\n      this.setTimeout(timeout);\n    }\n    if (callback) {\n      this.once('response', callback);\n    }\n    this[kFlushedHeaders] = false;\n  }\n  get method() {\n    return this[kHeaders][HTTP2_HEADER_METHOD];\n  }\n  set method(value) {\n    if (value) {\n      this[kHeaders][HTTP2_HEADER_METHOD] = value.toUpperCase();\n    }\n  }\n  get path() {\n    const header = this.method === 'CONNECT' ? HTTP2_HEADER_AUTHORITY : HTTP2_HEADER_PATH;\n    return this[kHeaders][header];\n  }\n  set path(value) {\n    if (value) {\n      const header = this.method === 'CONNECT' ? HTTP2_HEADER_AUTHORITY : HTTP2_HEADER_PATH;\n      this[kHeaders][header] = value;\n    }\n  }\n  get host() {\n    return this[kOrigin].hostname;\n  }\n  set host(_value) {\n    // Do nothing as this is read only.\n  }\n  get _mustNotHaveABody() {\n    return this.method === 'GET' || this.method === 'HEAD' || this.method === 'DELETE';\n  }\n  _write(chunk, encoding, callback) {\n    // https://github.com/nodejs/node/blob/654df09ae0c5e17d1b52a900a545f0664d8c7627/lib/internal/http2/util.js#L148-L156\n    if (this._mustNotHaveABody) {\n      callback(new Error('The GET, HEAD and DELETE methods must NOT have a body'));\n      /* istanbul ignore next: Node.js 12 throws directly */\n      return;\n    }\n    this.flushHeaders();\n    const callWrite = () => this._request.write(chunk, encoding, callback);\n    if (this._request) {\n      callWrite();\n    } else {\n      this[kJobs].push(callWrite);\n    }\n  }\n  _final(callback) {\n    this.flushHeaders();\n    const callEnd = () => {\n      // For GET, HEAD and DELETE and CONNECT\n      if (this._mustNotHaveABody || this.method === 'CONNECT') {\n        callback();\n        return;\n      }\n      this._request.end(callback);\n    };\n    if (this._request) {\n      callEnd();\n    } else {\n      this[kJobs].push(callEnd);\n    }\n  }\n  abort() {\n    if (this.res && this.res.complete) {\n      return;\n    }\n    if (!this.aborted) {\n      process.nextTick(() => this.emit('abort'));\n    }\n    this.aborted = true;\n    this.destroy();\n  }\n  async _destroy(error, callback) {\n    if (this.res) {\n      this.res._dump();\n    }\n    if (this._request) {\n      this._request.destroy();\n    } else {\n      process.nextTick(() => {\n        this.emit('close');\n      });\n    }\n    try {\n      await this[kPendingAgentPromise];\n    } catch (internalError) {\n      if (this.aborted) {\n        error = internalError;\n      }\n    }\n    callback(error);\n  }\n  async flushHeaders() {\n    if (this[kFlushedHeaders] || this.destroyed) {\n      return;\n    }\n    this[kFlushedHeaders] = true;\n    const isConnectMethod = this.method === HTTP2_METHOD_CONNECT;\n\n    // The real magic is here\n    const onStream = stream => {\n      this._request = stream;\n      if (this.destroyed) {\n        stream.destroy();\n        return;\n      }\n\n      // Forwards `timeout`, `continue`, `close` and `error` events to this instance.\n      if (!isConnectMethod) {\n        // TODO: Should we proxy `close` here?\n        proxyEvents(stream, this, ['timeout', 'continue']);\n      }\n      stream.once('error', error => {\n        this.destroy(error);\n      });\n      stream.once('aborted', () => {\n        const {\n          res\n        } = this;\n        if (res) {\n          res.aborted = true;\n          res.emit('aborted');\n          res.destroy();\n        } else {\n          this.destroy(new Error('The server aborted the HTTP/2 stream'));\n        }\n      });\n      const onResponse = (headers, flags, rawHeaders) => {\n        // If we were to emit raw request stream, it would be as fast as the native approach.\n        // Note that wrapping the raw stream in a Proxy instance won't improve the performance (already tested it).\n        const response = new IncomingMessage(this.socket, stream.readableHighWaterMark);\n        this.res = response;\n\n        // Undocumented, but it is used by `cacheable-request`\n        response.url = \"\".concat(this[kOrigin].origin).concat(this.path);\n        response.req = this;\n        response.statusCode = headers[HTTP2_HEADER_STATUS];\n        response.headers = headers;\n        response.rawHeaders = rawHeaders;\n        response.once('end', () => {\n          response.complete = true;\n\n          // Has no effect, just be consistent with the Node.js behavior\n          response.socket = null;\n          response.connection = null;\n        });\n        if (isConnectMethod) {\n          response.upgrade = true;\n\n          // The HTTP1 API says the socket is detached here,\n          // but we can't do that so we pass the original HTTP2 request.\n          if (this.emit('connect', response, stream, Buffer.alloc(0))) {\n            this.emit('close');\n          } else {\n            // No listeners attached, destroy the original request.\n            stream.destroy();\n          }\n        } else {\n          // Forwards data\n          stream.on('data', chunk => {\n            if (!response._dumped && !response.push(chunk)) {\n              stream.pause();\n            }\n          });\n          stream.once('end', () => {\n            if (!this.aborted) {\n              response.push(null);\n            }\n          });\n          if (!this.emit('response', response)) {\n            // No listeners attached, dump the response.\n            response._dump();\n          }\n        }\n      };\n\n      // This event tells we are ready to listen for the data.\n      stream.once('response', onResponse);\n\n      // Emits `information` event\n      stream.once('headers', headers => this.emit('information', {\n        statusCode: headers[HTTP2_HEADER_STATUS]\n      }));\n      stream.once('trailers', (trailers, flags, rawTrailers) => {\n        const {\n          res\n        } = this;\n\n        // https://github.com/nodejs/node/issues/41251\n        if (res === null) {\n          onResponse(trailers, flags, rawTrailers);\n          return;\n        }\n\n        // Assigns trailers to the response object.\n        res.trailers = trailers;\n        res.rawTrailers = rawTrailers;\n      });\n      stream.once('close', () => {\n        const {\n          aborted,\n          res\n        } = this;\n        if (res) {\n          if (aborted) {\n            res.aborted = true;\n            res.emit('aborted');\n            res.destroy();\n          }\n          const finish = () => {\n            res.emit('close');\n            this.destroy();\n            this.emit('close');\n          };\n          if (res.readable) {\n            res.once('end', finish);\n          } else {\n            finish();\n          }\n          return;\n        }\n        if (!this.destroyed) {\n          this.destroy(new Error('The HTTP/2 stream has been early terminated'));\n          this.emit('close');\n          return;\n        }\n        this.destroy();\n        this.emit('close');\n      });\n      this.socket = new Proxy(stream, proxySocketHandler);\n      for (const job of this[kJobs]) {\n        job();\n      }\n      this[kJobs].length = 0;\n      this.emit('socket', this.socket);\n    };\n    if (!(HTTP2_HEADER_AUTHORITY in this[kHeaders]) && !isConnectMethod) {\n      this[kHeaders][HTTP2_HEADER_AUTHORITY] = this[kOrigin].host;\n    }\n\n    // Makes a HTTP2 request\n    if (this[kSession]) {\n      try {\n        onStream(this[kSession].request(this[kHeaders]));\n      } catch (error) {\n        this.destroy(error);\n      }\n    } else {\n      this.reusedSocket = true;\n      try {\n        const promise = this.agent.request(this[kOrigin], this[kOptions], this[kHeaders]);\n        this[kPendingAgentPromise] = promise;\n        onStream(await promise);\n        this[kPendingAgentPromise] = false;\n      } catch (error) {\n        this[kPendingAgentPromise] = false;\n        this.destroy(error);\n      }\n    }\n  }\n  get connection() {\n    return this.socket;\n  }\n  set connection(value) {\n    this.socket = value;\n  }\n  getHeaderNames() {\n    return Object.keys(this[kHeaders]);\n  }\n  hasHeader(name) {\n    if (typeof name !== 'string') {\n      throw new ERR_INVALID_ARG_TYPE('name', 'string', name);\n    }\n    return Boolean(this[kHeaders][name.toLowerCase()]);\n  }\n  getHeader(name) {\n    if (typeof name !== 'string') {\n      throw new ERR_INVALID_ARG_TYPE('name', 'string', name);\n    }\n    return this[kHeaders][name.toLowerCase()];\n  }\n  get headersSent() {\n    return this[kFlushedHeaders];\n  }\n  removeHeader(name) {\n    if (typeof name !== 'string') {\n      throw new ERR_INVALID_ARG_TYPE('name', 'string', name);\n    }\n    if (this.headersSent) {\n      throw new ERR_HTTP_HEADERS_SENT('remove');\n    }\n    delete this[kHeaders][name.toLowerCase()];\n  }\n  setHeader(name, value) {\n    if (this.headersSent) {\n      throw new ERR_HTTP_HEADERS_SENT('set');\n    }\n    validateHeaderName(name);\n    validateHeaderValue(name, value);\n    const lowercased = name.toLowerCase();\n    if (lowercased === 'connection') {\n      if (value.toLowerCase() === 'keep-alive') {\n        return;\n      }\n      throw new Error(\"Invalid 'connection' header: \".concat(value));\n    }\n    if (lowercased === 'host' && this.method === 'CONNECT') {\n      this[kHeaders][HTTP2_HEADER_AUTHORITY] = value;\n    } else {\n      this[kHeaders][lowercased] = value;\n    }\n  }\n  setNoDelay() {\n    // HTTP2 sockets cannot be malformed, do nothing.\n  }\n  setSocketKeepAlive() {\n    // HTTP2 sockets cannot be malformed, do nothing.\n  }\n  setTimeout(ms, callback) {\n    const applyTimeout = () => this._request.setTimeout(ms, callback);\n    if (this._request) {\n      applyTimeout();\n    } else {\n      this[kJobs].push(applyTimeout);\n    }\n    return this;\n  }\n  get maxHeadersCount() {\n    if (!this.destroyed && this._request) {\n      return this._request.session.localSettings.maxHeaderListSize;\n    }\n    return undefined;\n  }\n  set maxHeadersCount(_value) {\n    // Updating HTTP2 settings would affect all requests, do nothing.\n  }\n}\nmodule.exports = ClientRequest;","map":{"version":3,"names":["_objectSpread","require","default","URL","urlToHttpOptions","http2","Writable","Agent","globalAgent","IncomingMessage","proxyEvents","ERR_INVALID_ARG_TYPE","ERR_INVALID_PROTOCOL","ERR_HTTP_HEADERS_SENT","validateHeaderName","validateHeaderValue","proxySocketHandler","HTTP2_HEADER_STATUS","HTTP2_HEADER_METHOD","HTTP2_HEADER_PATH","HTTP2_HEADER_AUTHORITY","HTTP2_METHOD_CONNECT","constants","kHeaders","Symbol","kOrigin","kSession","kOptions","kFlushedHeaders","kJobs","kPendingAgentPromise","ClientRequest","constructor","input","options","callback","_this","autoDestroy","emitClose","this","undefined","Object","assign","h2session","destroyed","Error","protocol","socket","encrypted","agent","maxEmptySessions","request","port","defaultPort","host","hostname","timeout","create","connection","method","path","res","aborted","reusedSocket","headers","header","setHeader","auth","authorization","Buffer","from","toString","session","tlsSession","socketPath","concat","servername","reuseSocket","_reuseSocket","createConnection","arguments","getSession","catch","setTimeout","once","value","toUpperCase","_value","_mustNotHaveABody","_write","chunk","encoding","flushHeaders","callWrite","_request","write","push","_final","callEnd","end","abort","complete","process","nextTick","emit","destroy","_destroy","error","_dump","internalError","isConnectMethod","onStream","stream","onResponse","flags","rawHeaders","response","readableHighWaterMark","url","origin","req","statusCode","upgrade","alloc","on","_dumped","pause","trailers","rawTrailers","finish","readable","Proxy","job","length","promise","getHeaderNames","keys","hasHeader","name","Boolean","toLowerCase","getHeader","headersSent","removeHeader","lowercased","setNoDelay","setSocketKeepAlive","ms","applyTimeout","maxHeadersCount","localSettings","maxHeaderListSize","module","exports"],"sources":["C:/Users/sakas/OneDrive/Desktop/gogo/node_modules/http2-wrapper/source/client-request.js"],"sourcesContent":["'use strict';\n// See https://github.com/facebook/jest/issues/2549\n// eslint-disable-next-line node/prefer-global/url\nconst {URL, urlToHttpOptions} = require('url');\nconst http2 = require('http2');\nconst {Writable} = require('stream');\nconst {Agent, globalAgent} = require('./agent.js');\nconst IncomingMessage = require('./incoming-message.js');\nconst proxyEvents = require('./utils/proxy-events.js');\nconst {\n\tERR_INVALID_ARG_TYPE,\n\tERR_INVALID_PROTOCOL,\n\tERR_HTTP_HEADERS_SENT\n} = require('./utils/errors.js');\nconst validateHeaderName = require('./utils/validate-header-name.js');\nconst validateHeaderValue = require('./utils/validate-header-value.js');\nconst proxySocketHandler = require('./utils/proxy-socket-handler.js');\n\nconst {\n\tHTTP2_HEADER_STATUS,\n\tHTTP2_HEADER_METHOD,\n\tHTTP2_HEADER_PATH,\n\tHTTP2_HEADER_AUTHORITY,\n\tHTTP2_METHOD_CONNECT\n} = http2.constants;\n\nconst kHeaders = Symbol('headers');\nconst kOrigin = Symbol('origin');\nconst kSession = Symbol('session');\nconst kOptions = Symbol('options');\nconst kFlushedHeaders = Symbol('flushedHeaders');\nconst kJobs = Symbol('jobs');\nconst kPendingAgentPromise = Symbol('pendingAgentPromise');\n\nclass ClientRequest extends Writable {\n\tconstructor(input, options, callback) {\n\t\tsuper({\n\t\t\tautoDestroy: false,\n\t\t\temitClose: false\n\t\t});\n\n\t\tif (typeof input === 'string') {\n\t\t\tinput = urlToHttpOptions(new URL(input));\n\t\t} else if (input instanceof URL) {\n\t\t\tinput = urlToHttpOptions(input);\n\t\t} else {\n\t\t\tinput = {...input};\n\t\t}\n\n\t\tif (typeof options === 'function' || options === undefined) {\n\t\t\t// (options, callback)\n\t\t\tcallback = options;\n\t\t\toptions = input;\n\t\t} else {\n\t\t\t// (input, options, callback)\n\t\t\toptions = Object.assign(input, options);\n\t\t}\n\n\t\tif (options.h2session) {\n\t\t\tthis[kSession] = options.h2session;\n\n\t\t\tif (this[kSession].destroyed) {\n\t\t\t\tthrow new Error('The session has been closed already');\n\t\t\t}\n\n\t\t\tthis.protocol = this[kSession].socket.encrypted ? 'https:' : 'http:';\n\t\t} else if (options.agent === false) {\n\t\t\tthis.agent = new Agent({maxEmptySessions: 0});\n\t\t} else if (typeof options.agent === 'undefined' || options.agent === null) {\n\t\t\tthis.agent = globalAgent;\n\t\t} else if (typeof options.agent.request === 'function') {\n\t\t\tthis.agent = options.agent;\n\t\t} else {\n\t\t\tthrow new ERR_INVALID_ARG_TYPE('options.agent', ['http2wrapper.Agent-like Object', 'undefined', 'false'], options.agent);\n\t\t}\n\n\t\tif (this.agent) {\n\t\t\tthis.protocol = this.agent.protocol;\n\t\t}\n\n\t\tif (options.protocol && options.protocol !== this.protocol) {\n\t\t\tthrow new ERR_INVALID_PROTOCOL(options.protocol, this.protocol);\n\t\t}\n\n\t\tif (!options.port) {\n\t\t\toptions.port = options.defaultPort || (this.agent && this.agent.defaultPort) || 443;\n\t\t}\n\n\t\toptions.host = options.hostname || options.host || 'localhost';\n\n\t\t// Unused\n\t\tdelete options.hostname;\n\n\t\tconst {timeout} = options;\n\t\toptions.timeout = undefined;\n\n\t\tthis[kHeaders] = Object.create(null);\n\t\tthis[kJobs] = [];\n\n\t\tthis[kPendingAgentPromise] = undefined;\n\n\t\tthis.socket = null;\n\t\tthis.connection = null;\n\n\t\tthis.method = options.method || 'GET';\n\n\t\tif (!(this.method === 'CONNECT' && (options.path === '/' || options.path === undefined))) {\n\t\t\tthis.path = options.path;\n\t\t}\n\n\t\tthis.res = null;\n\t\tthis.aborted = false;\n\t\tthis.reusedSocket = false;\n\n\t\tconst {headers} = options;\n\t\tif (headers) {\n\t\t\t// eslint-disable-next-line guard-for-in\n\t\t\tfor (const header in headers) {\n\t\t\t\tthis.setHeader(header, headers[header]);\n\t\t\t}\n\t\t}\n\n\t\tif (options.auth && !('authorization' in this[kHeaders])) {\n\t\t\tthis[kHeaders].authorization = 'Basic ' + Buffer.from(options.auth).toString('base64');\n\t\t}\n\n\t\toptions.session = options.tlsSession;\n\t\toptions.path = options.socketPath;\n\n\t\tthis[kOptions] = options;\n\n\t\t// Clients that generate HTTP/2 requests directly SHOULD use the :authority pseudo-header field instead of the Host header field.\n\t\tthis[kOrigin] = new URL(`${this.protocol}//${options.servername || options.host}:${options.port}`);\n\n\t\t// A socket is being reused\n\t\tconst reuseSocket = options._reuseSocket;\n\t\tif (reuseSocket) {\n\t\t\toptions.createConnection = (...args) => {\n\t\t\t\tif (reuseSocket.destroyed) {\n\t\t\t\t\treturn this.agent.createConnection(...args);\n\t\t\t\t}\n\n\t\t\t\treturn reuseSocket;\n\t\t\t};\n\n\t\t\t// eslint-disable-next-line promise/prefer-await-to-then\n\t\t\tthis.agent.getSession(this[kOrigin], this[kOptions]).catch(() => {});\n\t\t}\n\n\t\tif (timeout) {\n\t\t\tthis.setTimeout(timeout);\n\t\t}\n\n\t\tif (callback) {\n\t\t\tthis.once('response', callback);\n\t\t}\n\n\t\tthis[kFlushedHeaders] = false;\n\t}\n\n\tget method() {\n\t\treturn this[kHeaders][HTTP2_HEADER_METHOD];\n\t}\n\n\tset method(value) {\n\t\tif (value) {\n\t\t\tthis[kHeaders][HTTP2_HEADER_METHOD] = value.toUpperCase();\n\t\t}\n\t}\n\n\tget path() {\n\t\tconst header = this.method === 'CONNECT' ? HTTP2_HEADER_AUTHORITY : HTTP2_HEADER_PATH;\n\n\t\treturn this[kHeaders][header];\n\t}\n\n\tset path(value) {\n\t\tif (value) {\n\t\t\tconst header = this.method === 'CONNECT' ? HTTP2_HEADER_AUTHORITY : HTTP2_HEADER_PATH;\n\n\t\t\tthis[kHeaders][header] = value;\n\t\t}\n\t}\n\n\tget host() {\n\t\treturn this[kOrigin].hostname;\n\t}\n\n\tset host(_value) {\n\t\t// Do nothing as this is read only.\n\t}\n\n\tget _mustNotHaveABody() {\n\t\treturn this.method === 'GET' || this.method === 'HEAD' || this.method === 'DELETE';\n\t}\n\n\t_write(chunk, encoding, callback) {\n\t\t// https://github.com/nodejs/node/blob/654df09ae0c5e17d1b52a900a545f0664d8c7627/lib/internal/http2/util.js#L148-L156\n\t\tif (this._mustNotHaveABody) {\n\t\t\tcallback(new Error('The GET, HEAD and DELETE methods must NOT have a body'));\n\t\t\t/* istanbul ignore next: Node.js 12 throws directly */\n\t\t\treturn;\n\t\t}\n\n\t\tthis.flushHeaders();\n\n\t\tconst callWrite = () => this._request.write(chunk, encoding, callback);\n\t\tif (this._request) {\n\t\t\tcallWrite();\n\t\t} else {\n\t\t\tthis[kJobs].push(callWrite);\n\t\t}\n\t}\n\n\t_final(callback) {\n\t\tthis.flushHeaders();\n\n\t\tconst callEnd = () => {\n\t\t\t// For GET, HEAD and DELETE and CONNECT\n\t\t\tif (this._mustNotHaveABody || this.method === 'CONNECT') {\n\t\t\t\tcallback();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._request.end(callback);\n\t\t};\n\n\t\tif (this._request) {\n\t\t\tcallEnd();\n\t\t} else {\n\t\t\tthis[kJobs].push(callEnd);\n\t\t}\n\t}\n\n\tabort() {\n\t\tif (this.res && this.res.complete) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this.aborted) {\n\t\t\tprocess.nextTick(() => this.emit('abort'));\n\t\t}\n\n\t\tthis.aborted = true;\n\n\t\tthis.destroy();\n\t}\n\n\tasync _destroy(error, callback) {\n\t\tif (this.res) {\n\t\t\tthis.res._dump();\n\t\t}\n\n\t\tif (this._request) {\n\t\t\tthis._request.destroy();\n\t\t} else {\n\t\t\tprocess.nextTick(() => {\n\t\t\t\tthis.emit('close');\n\t\t\t});\n\t\t}\n\n\t\ttry {\n\t\t\tawait this[kPendingAgentPromise];\n\t\t} catch (internalError) {\n\t\t\tif (this.aborted) {\n\t\t\t\terror = internalError;\n\t\t\t}\n\t\t}\n\n\t\tcallback(error);\n\t}\n\n\tasync flushHeaders() {\n\t\tif (this[kFlushedHeaders] || this.destroyed) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis[kFlushedHeaders] = true;\n\n\t\tconst isConnectMethod = this.method === HTTP2_METHOD_CONNECT;\n\n\t\t// The real magic is here\n\t\tconst onStream = stream => {\n\t\t\tthis._request = stream;\n\n\t\t\tif (this.destroyed) {\n\t\t\t\tstream.destroy();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Forwards `timeout`, `continue`, `close` and `error` events to this instance.\n\t\t\tif (!isConnectMethod) {\n\t\t\t\t// TODO: Should we proxy `close` here?\n\t\t\t\tproxyEvents(stream, this, ['timeout', 'continue']);\n\t\t\t}\n\n\t\t\tstream.once('error', error => {\n\t\t\t\tthis.destroy(error);\n\t\t\t});\n\n\t\t\tstream.once('aborted', () => {\n\t\t\t\tconst {res} = this;\n\t\t\t\tif (res) {\n\t\t\t\t\tres.aborted = true;\n\t\t\t\t\tres.emit('aborted');\n\t\t\t\t\tres.destroy();\n\t\t\t\t} else {\n\t\t\t\t\tthis.destroy(new Error('The server aborted the HTTP/2 stream'));\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst onResponse = (headers, flags, rawHeaders) => {\n\t\t\t\t// If we were to emit raw request stream, it would be as fast as the native approach.\n\t\t\t\t// Note that wrapping the raw stream in a Proxy instance won't improve the performance (already tested it).\n\t\t\t\tconst response = new IncomingMessage(this.socket, stream.readableHighWaterMark);\n\t\t\t\tthis.res = response;\n\n\t\t\t\t// Undocumented, but it is used by `cacheable-request`\n\t\t\t\tresponse.url = `${this[kOrigin].origin}${this.path}`;\n\n\t\t\t\tresponse.req = this;\n\t\t\t\tresponse.statusCode = headers[HTTP2_HEADER_STATUS];\n\t\t\t\tresponse.headers = headers;\n\t\t\t\tresponse.rawHeaders = rawHeaders;\n\n\t\t\t\tresponse.once('end', () => {\n\t\t\t\t\tresponse.complete = true;\n\n\t\t\t\t\t// Has no effect, just be consistent with the Node.js behavior\n\t\t\t\t\tresponse.socket = null;\n\t\t\t\t\tresponse.connection = null;\n\t\t\t\t});\n\n\t\t\t\tif (isConnectMethod) {\n\t\t\t\t\tresponse.upgrade = true;\n\n\t\t\t\t\t// The HTTP1 API says the socket is detached here,\n\t\t\t\t\t// but we can't do that so we pass the original HTTP2 request.\n\t\t\t\t\tif (this.emit('connect', response, stream, Buffer.alloc(0))) {\n\t\t\t\t\t\tthis.emit('close');\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// No listeners attached, destroy the original request.\n\t\t\t\t\t\tstream.destroy();\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// Forwards data\n\t\t\t\t\tstream.on('data', chunk => {\n\t\t\t\t\t\tif (!response._dumped && !response.push(chunk)) {\n\t\t\t\t\t\t\tstream.pause();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\tstream.once('end', () => {\n\t\t\t\t\t\tif (!this.aborted) {\n\t\t\t\t\t\t\tresponse.push(null);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\tif (!this.emit('response', response)) {\n\t\t\t\t\t\t// No listeners attached, dump the response.\n\t\t\t\t\t\tresponse._dump();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// This event tells we are ready to listen for the data.\n\t\t\tstream.once('response', onResponse);\n\n\t\t\t// Emits `information` event\n\t\t\tstream.once('headers', headers => this.emit('information', {statusCode: headers[HTTP2_HEADER_STATUS]}));\n\n\t\t\tstream.once('trailers', (trailers, flags, rawTrailers) => {\n\t\t\t\tconst {res} = this;\n\n\t\t\t\t// https://github.com/nodejs/node/issues/41251\n\t\t\t\tif (res === null) {\n\t\t\t\t\tonResponse(trailers, flags, rawTrailers);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Assigns trailers to the response object.\n\t\t\t\tres.trailers = trailers;\n\t\t\t\tres.rawTrailers = rawTrailers;\n\t\t\t});\n\n\t\t\tstream.once('close', () => {\n\t\t\t\tconst {aborted, res} = this;\n\t\t\t\tif (res) {\n\t\t\t\t\tif (aborted) {\n\t\t\t\t\t\tres.aborted = true;\n\t\t\t\t\t\tres.emit('aborted');\n\t\t\t\t\t\tres.destroy();\n\t\t\t\t\t}\n\n\t\t\t\t\tconst finish = () => {\n\t\t\t\t\t\tres.emit('close');\n\n\t\t\t\t\t\tthis.destroy();\n\t\t\t\t\t\tthis.emit('close');\n\t\t\t\t\t};\n\n\t\t\t\t\tif (res.readable) {\n\t\t\t\t\t\tres.once('end', finish);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfinish();\n\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!this.destroyed) {\n\t\t\t\t\tthis.destroy(new Error('The HTTP/2 stream has been early terminated'));\n\t\t\t\t\tthis.emit('close');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis.destroy();\n\t\t\t\tthis.emit('close');\n\t\t\t});\n\n\t\t\tthis.socket = new Proxy(stream, proxySocketHandler);\n\n\t\t\tfor (const job of this[kJobs]) {\n\t\t\t\tjob();\n\t\t\t}\n\n\t\t\tthis[kJobs].length = 0;\n\n\t\t\tthis.emit('socket', this.socket);\n\t\t};\n\n\t\tif (!(HTTP2_HEADER_AUTHORITY in this[kHeaders]) && !isConnectMethod) {\n\t\t\tthis[kHeaders][HTTP2_HEADER_AUTHORITY] = this[kOrigin].host;\n\t\t}\n\n\t\t// Makes a HTTP2 request\n\t\tif (this[kSession]) {\n\t\t\ttry {\n\t\t\t\tonStream(this[kSession].request(this[kHeaders]));\n\t\t\t} catch (error) {\n\t\t\t\tthis.destroy(error);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.reusedSocket = true;\n\n\t\t\ttry {\n\t\t\t\tconst promise = this.agent.request(this[kOrigin], this[kOptions], this[kHeaders]);\n\t\t\t\tthis[kPendingAgentPromise] = promise;\n\n\t\t\t\tonStream(await promise);\n\n\t\t\t\tthis[kPendingAgentPromise] = false;\n\t\t\t} catch (error) {\n\t\t\t\tthis[kPendingAgentPromise] = false;\n\n\t\t\t\tthis.destroy(error);\n\t\t\t}\n\t\t}\n\t}\n\n\tget connection() {\n\t\treturn this.socket;\n\t}\n\n\tset connection(value) {\n\t\tthis.socket = value;\n\t}\n\n\tgetHeaderNames() {\n\t\treturn Object.keys(this[kHeaders]);\n\t}\n\n\thasHeader(name) {\n\t\tif (typeof name !== 'string') {\n\t\t\tthrow new ERR_INVALID_ARG_TYPE('name', 'string', name);\n\t\t}\n\n\t\treturn Boolean(this[kHeaders][name.toLowerCase()]);\n\t}\n\n\tgetHeader(name) {\n\t\tif (typeof name !== 'string') {\n\t\t\tthrow new ERR_INVALID_ARG_TYPE('name', 'string', name);\n\t\t}\n\n\t\treturn this[kHeaders][name.toLowerCase()];\n\t}\n\n\tget headersSent() {\n\t\treturn this[kFlushedHeaders];\n\t}\n\n\tremoveHeader(name) {\n\t\tif (typeof name !== 'string') {\n\t\t\tthrow new ERR_INVALID_ARG_TYPE('name', 'string', name);\n\t\t}\n\n\t\tif (this.headersSent) {\n\t\t\tthrow new ERR_HTTP_HEADERS_SENT('remove');\n\t\t}\n\n\t\tdelete this[kHeaders][name.toLowerCase()];\n\t}\n\n\tsetHeader(name, value) {\n\t\tif (this.headersSent) {\n\t\t\tthrow new ERR_HTTP_HEADERS_SENT('set');\n\t\t}\n\n\t\tvalidateHeaderName(name);\n\t\tvalidateHeaderValue(name, value);\n\n\t\tconst lowercased = name.toLowerCase();\n\n\t\tif (lowercased === 'connection') {\n\t\t\tif (value.toLowerCase() === 'keep-alive') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthrow new Error(`Invalid 'connection' header: ${value}`);\n\t\t}\n\n\t\tif (lowercased === 'host' && this.method === 'CONNECT') {\n\t\t\tthis[kHeaders][HTTP2_HEADER_AUTHORITY] = value;\n\t\t} else {\n\t\t\tthis[kHeaders][lowercased] = value;\n\t\t}\n\t}\n\n\tsetNoDelay() {\n\t\t// HTTP2 sockets cannot be malformed, do nothing.\n\t}\n\n\tsetSocketKeepAlive() {\n\t\t// HTTP2 sockets cannot be malformed, do nothing.\n\t}\n\n\tsetTimeout(ms, callback) {\n\t\tconst applyTimeout = () => this._request.setTimeout(ms, callback);\n\n\t\tif (this._request) {\n\t\t\tapplyTimeout();\n\t\t} else {\n\t\t\tthis[kJobs].push(applyTimeout);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\tget maxHeadersCount() {\n\t\tif (!this.destroyed && this._request) {\n\t\t\treturn this._request.session.localSettings.maxHeaderListSize;\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tset maxHeadersCount(_value) {\n\t\t// Updating HTTP2 settings would affect all requests, do nothing.\n\t}\n}\n\nmodule.exports = ClientRequest;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}